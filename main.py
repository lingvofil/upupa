# ================== –ë–õ–û–ö 0: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ ==================
import os
import random
import logging
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import FSInputFile, Message, PollAnswer, BufferedInputFile
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from gigachat import GigaChat
import json
import nest_asyncio
from datetime import datetime, timedelta
import re

nest_asyncio.apply()
# ================== –ë–õ–û–ö 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==================
from Config import *

# ================== –ë–õ–û–ö 2: –°–ü–†–ê–≤–ö–ê, –ü–†–û–ú–ü–¢–´, –†–ê–ù–ì–ò, –°–¢–û–ü-–°–õ–û–í–ê, –ö–ê–ù–ê–õ–´, –ñ–ò–í–û–¢–ù–´–ï ==================
from Prompts import *

# ================== –ë–õ–û–ö 3.1: –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ==================
from Common_settings import *
        
# ================== –ë–õ–û–ö 3.2: –ù–ê–°–¢–†–û–ô–ö–ê –ß–ê–¢–û–í ==================
from Chat_settings import *

# ================== –ë–õ–û–ö 3.3: –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò, –†–ê–ù–ì–û–í ==================
from Stat_rank_settings import *

# ================== –ë–õ–û–ö 3.4: –ù–ê–°–¢–†–û–ô–ö–ê –õ–ï–ö–°–ò–ö–û–ù–ê ==================
from Lexicon_settings import *

# ================== –ë–õ–û–ö 3.5: –ù–ê–°–¢–†–û–ô–ö–ê –°–ú–°, –ú–ú–° ==================
from SMS_settings import *

# ================== –ë–õ–û–ö 3.6: –ù–ê–°–¢–†–û–ô–ö–ê –ö–¢–û –Ø, –ß–¢–û –ó–ê –ß–ê–¢, –ü–ê–†–û–î–ò–Ø ==================
from whoparody import (
    process_user_profile,
    process_chat_profile,
    process_parody
)

# ================== –ë–õ–û–ö 3.7: –ù–ê–°–¢–†–û–ô–ö–ê –í–ò–ö–¢–û–†–ò–ù–ê ==================
from quiz import process_quiz_start, process_poll_answer, schedule_daily_quiz

# ================== –ë–õ–û–ö 3.8: –ù–ê–°–¢–†–û–ô–ö–ê –î–û–ë–ê–í–¨ –û–ü–ò–®–ò ==================
from adddescribe import (
    process_image_description,
    get_photo_from_message,
    download_telegram_image,
    process_image,
    overlay_text_on_image,
    handle_add_text_command
)

# ================== –ë–õ–û–ö 3.9: –ù–ê–°–¢–†–û–ô–ö–ê –ß–û–¢–ê–ú ==================
from whatisthere import (
    process_audio_description, 
    process_video_description,
    process_image_whatisthere,
    process_gif_whatisthere
)

# ================== –ë–õ–û–ö 3.7: –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–°–´–õ–ö–ò –ú–ï–î–ò–ê ==================
from Channels_settings import process_channel_command

# ================== –ë–õ–û–ö 3.8: –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–ò–°–ö–ê ==================
from search import (
    handle_message,
    process_image_search,
    save_and_send_searched_image,
    process_gif_search,
    save_and_send_gif
)

# ================== –ë–õ–û–ö 3.9: –ù–ê–°–¢–†–û–ô–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ê–†–¢–ò–ù–û–ö ==================
from Picgeneration import handle_image_generation_command, handle_pun_image_command, handle_redraw_command

# ================== –ë–õ–û–ö 3.10: –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–ì–û–î–´ ==================
from weather import (
    get_weather_with_fallback, 
    get_mock_weather, 
    format_weekly_forecast, 
    handle_current_weather_command, 
    handle_weekly_forecast_command
)
# ================== –ë–õ–û–ö 3.11: –ù–ê–°–¢–†–û–ô–ö–ê –ì–û–í–û–†–ò–õ–ö–ò ==================
from talking import (
    update_chat_settings,
    update_conversation_history,
    format_chat_history,
    generate_response,
    handle_bot_conversation,
    get_current_chat_prompt,
    handle_list_prompts_command,
    handle_current_prompt_command,
    handle_set_prompt_command,
    handle_change_prompt_randomly_command,
    handle_poem_command,
    process_general_message
)
from random_reactions import process_random_reactions

# ================== –ë–õ–û–ö 3.15: –ù–ê–°–¢–†–û–ô–ö–ê –ò–ú–ï–ù–ò ==================
from nameinfo import process_name_info

# ================== –ë–õ–û–ö 3.16: –ù–ê–°–¢–†–û–ô–ö–ê –ß–û–ë–´–õ–û ==================
from summarize import summarize_chat_history

# ================== –ë–õ–û–ö 3.17 –ü–†–ï–ö–û–õ–¨–ù–ê–Ø –ï–ì–†–ê ==================
from egra import start_egra, handle_egra_answer, handle_final_button_press

# ================== –ë–õ–û–ö 3.18: –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ï–°–°–ò–ô ==================
from profession import get_random_okved_and_commentary 

# ================== –ë–õ–û–ö 3.18: –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–ß–ï–¢–ê –ù–ê–ì–†–£–ó–ö–ò –ë–û–¢–ê ==================
from statistics import init_db, get_total_messages_per_chat, get_activity_by_hour
from middlewares import StatisticsMiddleware
        
# ================== –ë–õ–û–ö 4: –•–≠–ù–î–õ–ï–†–´ ==================
@@router.message(Command("stats"), F.from_user.id == ADMIN_ID)
async def get_stats_command(message: Message):
    chat_stats = await get_total_messages_per_chat()
    hour_stats = await get_activity_by_hour()

    response_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
    response_text += "**–¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:**\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-5
    sorted_chats = sorted(chat_stats.items(), key=lambda item: item[1], reverse=True)[:5]

    for chat_id, count in sorted_chats:
        response_text += f" ‚Ä¢ `ID {chat_id}`: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    response_text += "\n**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (UTC):**\n"
    if hour_stats:
        for hour in sorted(hour_stats.keys()):
            response_text += f" ‚Ä¢ `{hour:02d}:00 - {hour:02d}:59`: {hour_stats[hour]} —Å–æ–æ–±—â.\n"
    else:
        response_text += "–î–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º –ø–æ–∫–∞ –Ω–µ—Ç.\n"

    await message.answer(response_text, parse_mode='Markdown')

@router.message(CommandStart())
async def process_start_command(message: types.Message):
    await message.reply("–Ø –ø–∏–¥–æ—Ä–∞—Å")

@router.message(lambda message: message.text is not None and message.text.lower() == "–æ—á–∏—Å—Ç–∫–∞" and message.from_user.id not in BLOCKED_USERS)
async def process_clear_command(message: types.Message):
    user_id = message.from_user.id
    conversation_history[user_id] = []
    await message.reply("–°–º—ã—Ç–æ –≤—Å—ë –≥–æ–≤–Ω–æ")

@router.message(lambda message: message.text and message.text.lower() == "—á–æ—É–º–µ–µ—à" and message.from_user.id not in BLOCKED_USERS)
async def handle_chooumeesh(message: types.Message):
    await message.reply(HELP_TEXT)

@router.message(lambda message: message.text and message.text.lower().startswith("—É–ø—É–ø–∞ –≤—ã–π–¥–∏ –∏–∑ "))
async def leave_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ï—â–µ —á–æ —Å–¥–µ–ª–∞—Ç—å?")
        return
    chat_identifier = message.text[14:].strip()  # –£–±–∏—Ä–∞–µ–º "—É–ø—É–ø–∞ –≤—ã–π–¥–∏ –∏–∑ "
    await process_leave_chat(message, chat_identifier)

@router.message(lambda message: message.text and message.text.lower() == "–æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç—ã")
async def update_all_chats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ò–¥–∏ –Ω–∞—Ö—É–π, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ.")
        return
    await process_update_all_chats(message, bot)

@router.message(lambda message: message.text and message.text.lower() == "–≥–¥–µ —Å–∏–¥–∏—à—å")
async def handle_where_sits(message: types.Message):
    global chat_list
    response = get_chats_list(message.chat.id, message.chat.title, message.chat.username)
    await message.reply(response)

@router.message(lambda message: message.text and message.text.lower() == "–æ—Ç–∫–ª—é—á–∏ —Å–º—Å")
async def disable_sms(message: types.Message):
    chat_id = str(message.chat.id)
    user_id = message.from_user.id  # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    response = await process_disable_sms(chat_id, user_id, bot)
    await message.reply(response)

@router.message(lambda message: message.text and message.text.lower() == "–≤–∫–ª—é—á–∏ —Å–º—Å")
async def enable_sms(message: types.Message):
    chat_id = str(message.chat.id)
    user_id = message.from_user.id
    response = await process_enable_sms(chat_id, user_id, bot)
    await message.reply(response)

@router.message(lambda message: message.text and (message.text.lower().startswith("—Å–º—Å ") or message.text.lower().startswith("–º–º—Å ")))
async def check_sms_mms_permission(message: types.Message):
    chat_id = str(message.chat.id)
    await process_check_sms_mms_permission(chat_id, message)

@router.message(lambda message: message.text and message.text.lower().startswith("—Å–º—Å "))
async def handle_send_sms(message: types.Message):
    from SMS_settings import process_send_sms
    global chat_list
    await process_send_sms(message, chat_list, bot, sms_disabled_chats)

@router.message(lambda message: (message.text and message.text.lower().startswith("–º–º—Å ")) or 
                                (message.caption and message.caption.lower().startswith("–º–º—Å ")))
async def handle_send_mms(message: types.Message):
    from SMS_settings import process_send_mms
    await process_send_mms(message, chat_list, bot, sms_disabled_chats)

@router.message(lambda message: message.text and message.text.lower() == "–º–æ–π –ª–µ–∫—Å–∏–∫–æ–Ω")
async def handle_my_lexicon(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    user_id = message.from_user.id
    chat_id = message.chat.id  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ç–∏–º —á–∞—Ç–æ–º
    await process_my_lexicon(user_id, chat_id, message)

@router.message(lambda message: message.text and message.text.lower() == "–ª–µ–∫—Å–∏–∫–æ–Ω —á–∞—Ç")
async def handle_chat_lexicon(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    response_text = await process_chat_lexicon(message)
    await message.reply(response_text)
    
@router.message(lambda message: message.text and message.text.lower().startswith("–ª–µ–∫—Å–∏–∫–æ–Ω "))
async def handle_user_lexicon(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    username_or_name = message.text[len("–ª–µ–∫—Å–∏–∫–æ–Ω "):].strip()
    if username_or_name.startswith('@'):
        username_or_name = username_or_name[1:]   
    chat_id = message.chat.id
    await process_user_lexicon(username_or_name, chat_id, message)

@router.message(F.text.lower() == "–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_personal_stats(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    response, has_stats = await get_user_statistics(chat_id, user_id)
    await message.reply(response)

@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç")
async def show_chat_stats(message: types.Message):
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))
    report = await generate_chat_stats_report(str(message.chat.id))
    reply_text = report if report else "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    await message.reply(reply_text, parse_mode="HTML")

@router.message(lambda message: message.text and message.text.lower() == "—á—Ç–æ –∑–∞ —á–∞—Ç")
async def handle_chat_profile(message: types.Message):
    await process_chat_profile(message)

@router.message(lambda message: message.text and message.text.lower() == "–∫—Ç–æ —è")
async def handle_user_profile(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    user_id = message.from_user.id
    chat_id = message.chat.id  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç—Ç–∏–º —á–∞—Ç–æ–º
    await process_user_profile(user_id, chat_id, message)

@router.message(lambda message: message.text and message.text.lower().startswith("–ø–∞—Ä–æ–¥–∏—è"))
async def handle_parody(message: types.Message):
   random_action = random.choice(actions)
   await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
   chat_id = message.chat.id  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ—Ä–∞–∑ —ç—Ç–∏–º —á–∞—Ç–æ–º
   await process_parody(message, chat_id)

@router.message(F.text.lower().contains("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"))
async def start_quiz(message: Message, bot: Bot):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    processing_msg = await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞–ø—Ä–æ—Å–∏–∫–∏...")
    success, error_message = await process_quiz_start(message, bot)
    await processing_msg.delete()
    if not success:
        await message.reply(error_message)

# ================== –ù–û–í–û–ï: –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–µ–≥—Ä–∞" ==================
@router.message(F.text.lower() == "–µ–≥—Ä–∞")
async def egra_command_handler(message: types.Message):
    await start_egra(message, bot)

# ================== –ò–ó–ú–ï–ù–ï–ù–û: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–æ–≤ ==================
@router.poll_answer()
async def handle_poll_answers(poll_answer: PollAnswer, bot: Bot):
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –≤ "–µ–≥—Ä–µ"
    # –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç True, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    is_egra_handled = await handle_egra_answer(poll_answer, bot)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–µ –æ—Ç–≤–µ—Ç –≤ "–µ–≥—Ä–µ", –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    if not is_egra_handled:
        await process_poll_answer(poll_answer, bot)

# ================== –ù–û–í–û–ï: –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ –∏–≥—Ä–µ ==================
@router.callback_query(F.data == "egra_final_choice")
async def egra_callback_handler(callback_query: types.CallbackQuery):
    await handle_final_button_press(callback_query, bot)

@router.message(lambda message: message.text and message.text.lower() in CHANNEL_SETTINGS.keys())
async def send_random_media(message: types.Message):
    await process_channel_command(message, CHANNEL_SETTINGS)

@router.message(lambda message: 
    message.text and 
    message.text.lower().startswith("–∏–º—è ") and 
    message.from_user and  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    message.from_user.id not in BLOCKED_USERS
)

@router.message(F.text.lower() == "–∫–µ–º —Å—Ç–∞—Ç—å") # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –•–≠–ù–î–õ–ï–†
async def choose_profession_command(message: types.Message):
    await get_random_okved_and_commentary(message)
    
async def handle_name_info(message: types.Message):
    random_action = random.choice(actions)
    success, response = await process_name_info(message)
    await message.reply(response)

@router.message(lambda message: message.text and message.text.lower().startswith("–Ω–∞–π–¥–∏") and message.from_user.id not in BLOCKED_USERS)
async def handle_image_search(message: Message):
    random_action = random.choice(actions)
    query = message.text[len("–Ω–∞–π–¥–∏"):].strip()
    success, response_message, image_data = await process_image_search(query)
    if success and image_data:
        await save_and_send_searched_image(message, image_data)
    elif response_message:
        await message.reply(response_message)

@router.message(lambda message: message.text and message.text.lower() in queries and message.from_user.id not in BLOCKED_USERS)
async def universal_handler(message: types.Message):
    keyword = message.text.lower()
    query, temp_img_path, error_msg = queries[keyword]
    await handle_message(message, query, temp_img_path, error_msg)

@router.message(lambda message: message.text and message.text.lower().replace(" ", "") == "–∫–æ—Ç–æ–≥–∏—Ñ" and message.from_user.id not in BLOCKED_USERS)
async def send_kotogif(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    await message.reply("–©–∞ —â–∞")
    success, error_message, gif_data = await process_gif_search("cat")
    if success and gif_data:
        await save_and_send_gif(message, gif_data)
    elif error_message:
        await message.reply(error_message)

@router.message(lambda message: 
    (
        (message.audio or message.voice) and message.caption and "—á–æ—Ç–∞–º" in message.caption.lower()
    ) 
    or 
    (
        message.text and "—á–æ—Ç–∞–º" in message.text.lower() and message.reply_to_message and 
        (message.reply_to_message.audio or message.reply_to_message.voice)
    ) and message.from_user.id not in BLOCKED_USERS
)
async def handle_audio_description(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    processing_msg = await message.reply("–°–ª—É—à–æ—é...")
    success, response = await process_audio_description(message)
    await processing_msg.delete()
    await message.reply(response)

@router.message(lambda message: 
    (
        (message.video and message.caption and "—á–æ—Ç–∞–º" in message.caption.lower())
    )
    or 
    (
        message.text and "—á–æ—Ç–∞–º" in message.text.lower() and message.reply_to_message and 
        message.reply_to_message.video
    ) and message.from_user.id not in BLOCKED_USERS
)
async def handle_video_description(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    processing_msg = await message.reply("–°–º–∞—Ç—Ä—é...")
    success, response = await process_video_description(message)
    await processing_msg.delete()
    await message.reply(response)

# –ù–û–í–´–ô —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è "—á–æ—Ç–∞–º" —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@router.message(lambda message: 
    (
        (message.photo and message.caption and "—á–æ—Ç–∞–º" in message.caption.lower())
    )
    or 
    (
        message.text and "—á–æ—Ç–∞–º" in message.text.lower() and message.reply_to_message and 
        message.reply_to_message.photo
    ) and message.from_user.id not in BLOCKED_USERS
)
async def handle_image_whatisthere(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    processing_msg = await message.reply("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –µ—Ç–æ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–æ...")
    success, response = await process_image_whatisthere(message)
    await processing_msg.delete()
    await message.reply(response)

# –ù–û–í–´–ô —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è "—á–æ—Ç–∞–º" —Å –≥–∏—Ñ–∫–æ–π
@router.message(lambda message: 
    (
        (message.animation and message.caption and "—á–æ—Ç–∞–º" in message.caption.lower())
    )
    or 
    (
        message.text and "—á–æ—Ç–∞–º" in message.text.lower() and message.reply_to_message and 
        message.reply_to_message.animation
    ) and message.from_user.id not in BLOCKED_USERS
)
async def handle_gif_whatisthere(message: types.Message):
    random_action = random.choice(actions)
    await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)
    processing_msg = await message.reply("–î–∞ –Ω–µ –¥–µ—Ä–≥–∞–π—Å—è —Ç—ã...")
    success, response = await process_gif_whatisthere(message)
    await processing_msg.delete()
    await message.reply(response)

@router.message(lambda message: 
    (
        (message.photo and message.caption and "–æ–ø–∏—à–∏" in message.caption.lower())
        or 
        (message.text and "–æ–ø–∏—à–∏" in message.text.lower() and message.reply_to_message and (message.reply_to_message.photo or message.reply_to_message.document))
    ) and message.from_user.id not in BLOCKED_USERS
)
async def describe_image(message: types.Message):
    random_action = random.choice(actions)
    success, response = await process_image_description(bot, message)
    await message.reply(response)

@router.message(
    lambda message: (
        (message.photo and message.caption and "–¥–æ–±–∞–≤—å" in message.caption.lower()) or 
        (message.text and "–¥–æ–±–∞–≤—å" in message.text.lower() and message.reply_to_message and (message.reply_to_message.photo or message.reply_to_message.document))
    ) and message.from_user.id not in BLOCKED_USERS
)
async def add_text_to_image(message: types.Message):
    await handle_add_text_command(message)

@router.message(
    lambda message: (
        message.from_user.id not in BLOCKED_USERS and
        message.text and (
            message.text.lower().startswith("–Ω–∞—Ä–∏—Å—É–π") or
            (message.text.lower().strip() == "–Ω–∞—Ä–∏—Å—É–π" and message.reply_to_message)
        )
    )
)
async def generate_image(message: types.Message):
    await handle_image_generation_command(message)

@router.message(
    lambda message: (
        (
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é "–ø–µ—Ä–µ—Ä–∏—Å—É–π"
            (message.photo and message.caption and "–ø–µ—Ä–µ—Ä–∏—Å—É–π" in message.caption.lower()) or
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é "–ø–µ—Ä–µ—Ä–∏—Å—É–π"  
            (message.document and message.caption and "–ø–µ—Ä–µ—Ä–∏—Å—É–π" in message.caption.lower()) or
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –†–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "–ø–µ—Ä–µ—Ä–∏—Å—É–π"
            (message.text and "–ø–µ—Ä–µ—Ä–∏—Å—É–π" in message.text.lower() and message.reply_to_message and 
             (message.reply_to_message.photo or message.reply_to_message.document))
        ) and message.from_user.id not in BLOCKED_USERS
    )
)
async def redraw_image(message: types.Message):
    from Picgeneration import handle_redraw_command
    await handle_redraw_command(message)

@router.message(
    lambda message: message.text and 
    message.text.lower().strip() == "—Å–∫–∞–ª–∞–º–±—É—Ä—å" and 
    message.from_user.id not in BLOCKED_USERS
)
async def generate_pun_with_image(message: types.Message):
    await handle_pun_image_command(message)

@router.message(lambda message: message.text and message.text.lower() == "—É–ø—É–ø–∞ –ø–æ–≥–æ–¥–∞" and message.from_user.id not in BLOCKED_USERS)
async def handle_weather_command(message: types.Message):
    await handle_current_weather_command(message)
        
@router.message(lambda message: message.text and message.text.lower().startswith("–ø–æ–≥–æ–¥–∞ –Ω–µ–¥–µ–ª—è") and message.from_user.id not in BLOCKED_USERS)
async def handle_weekly_forecast(message: types.Message):
    await handle_weekly_forecast_command(message)

@router.message(F.text.lower() == "—á–æ–±—ã–ª–æ")
async def handle_chobylo(message: types.Message):
    random_action = random.choice(actions)
    await summarize_chat_history(message, model, LOG_FILE, actions)

@router.message(F.text.lower() == "—É–ø—É–ø–∞ –Ω–µ –±–æ–ª—Ç–∞–π")
async def disable_dialog(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in chat_settings:
        chat_settings[chat_id] = {"dialog_enabled": True, "prompt": None}
    chat_settings[chat_id]["dialog_enabled"] = False
    save_chat_settings()
    await message.reply("–õ–∞–Ω–∞ –æ—Ç—ä–µ–±–∏—Ç–µ—Å—å.")

@router.message(F.text.lower() == "—É–ø—É–ø–∞ –≥–æ–≤–æ—Ä–∏")
async def enable_dialog(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in chat_settings:
        chat_settings[chat_id] = {"dialog_enabled": True, "prompt": None}
    chat_settings[chat_id]["dialog_enabled"] = True
    save_chat_settings()
    await message.reply("–î—Ä–∞—Ç—É—Ç–∏")

@router.message(F.text.lower() == "–ø—Ä–æ–º–ø—Ç—ã")
async def list_prompts_command(message: types.Message):
    await handle_list_prompts_command(message)

@router.message(F.text.lower() == "–∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç")
async def current_prompt_command(message: types.Message):
    await handle_current_prompt_command(message)

@router.message(F.text.lower().startswith("–ø—Ä–æ–º–ø—Ç "))
async def set_prompt_command(message: types.Message):
    await handle_set_prompt_command(message)

@router.message(F.text.lower() == "–ø–æ–º–µ–Ω—è–π –ø—Ä–æ–º–ø—Ç")
async def change_prompt_randomly_command(message: types.Message):
    await handle_change_prompt_randomly_command(message)

@router.message(lambda message: message.text and message.text.lower().startswith(("–ø–∏—Ä–æ–∂–æ–∫", "–ø–æ—Ä–æ—à–æ–∫")))
async def handle_poem(message: types.Message):
    poem_type = "–ø–∏—Ä–æ–∂–æ–∫" if message.text.lower().startswith("–ø–∏—Ä–æ–∂–æ–∫") else "–ø–æ—Ä–æ—à–æ–∫"
    await handle_poem_command(message, poem_type)

@router.message()
async def process_message(message: types.Message):
    await process_general_message(message)
    
# ================== –ë–õ–û–ö 5: –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
async def main():
    # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    init_db()

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω
    chat_ids = ['-1001707530786', '-1001781970364']  # –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    for chat_id in chat_ids:
        chat_id_int = int(chat_id)
        asyncio.create_task(schedule_daily_quiz(bot, chat_id_int))

    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.middleware(StatisticsMiddleware())

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
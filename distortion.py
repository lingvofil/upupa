import os
import asyncio
import random
import logging
import subprocess
from aiogram import types
from aiogram.types import FSInputFile, BufferedInputFile
from PIL import Image, ImageFilter, ImageEnhance

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from config import bot
from whatisthere import download_file # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

# --- –§—É–Ω–∫—Ü–∏–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è ---

async def distort_image(input_path: str, output_path: str) -> bool:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏—Å–∫–∞–∂–µ–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å –ø–æ–º–æ—â—å—é Pillow.
    """
    try:
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
            img = img.convert("RGB")
            
            # 1. –°–¥–≤–∏–≥ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è "–≥–ª—é—á–Ω–æ–≥–æ" —ç—Ñ—Ñ–µ–∫—Ç–∞
            r, g, b = img.split()
            r_offset = random.randint(-10, 10)
            g_offset = random.randint(-10, 10)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            r = r.transform(img.size, Image.AFFINE, (1, 0, r_offset, 0, 1, 0))
            g = g.transform(img.size, Image.AFFINE, (1, 0, g_offset, 0, 1, 0))
            
            img = Image.merge("RGB", (r, g, b))

            # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            for _ in range(random.randint(5, 15)):
                y = random.randint(0, img.height - 1)
                for x in range(img.width):
                    if random.random() > 0.95: # –ù–µ —Å–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è
                         img.putpixel((x, y), (random.randint(0,255), random.randint(0,255), random.randint(0,255)))

            # 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            if random.random() > 0.5:
                img = img.filter(ImageFilter.SHARPEN)
            else:
                enhancer = ImageEnhance.Contrast(img)
                img = enhancer.enhance(random.uniform(1.2, 1.8))

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–∂–∞—Ç–∏–µ–º –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            img.save(output_path, "JPEG", quality=random.randint(60, 85))
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–∞–∂–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

async def distort_video(input_path: str, output_path: str) -> bool:
    """
    –ò—Å–∫–∞–∂–∞–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ GIF —Å –ø–æ–º–æ—â—å—é ffmpeg.
    –í–ê–ñ–ù–û: ffmpeg –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.
    """
    try:
        # –ù–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è ffmpeg
        filters = [
            # –î–æ–±–∞–≤–ª—è–µ—Ç —à—É–º –∏ —Å–¥–≤–∏–≥–∞–µ—Ç —Ü–≤–µ—Ç–∞
            "noise=alls=10:allf=t,hue=H='2*PI*t':s=2", 
            # –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è
            "scale=iw/4:ih/4,scale=iw*4:ih*4:flags=neighbor",
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ –≥–∞–º–º—ã
            "eq=contrast=1.5:gamma=1.5",
            # –°–ª—É—á–∞–π–Ω—ã–µ —Å–¥–≤–∏–≥–∏ –ø–æ–ª–µ–π
            "il=l=random(1,2)*mod(n,2):c=random(1,2)*mod(n,2)"
        ]
        chosen_filter = random.choice(filters)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è ffmpeg
        command = [
            'ffmpeg',
            '-i', input_path,
            '-vf', chosen_filter,
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            '-c:a', 'copy', # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            output_path
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            logging.error(f"–û—à–∏–±–∫–∞ ffmpeg: {stderr.decode()}")
            return False
        return True
    except FileNotFoundError:
        logging.error("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–∞–∂–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---

async def process_distortion(message: types.Message) -> tuple[bool, str | None, str | None]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, —Ç–∏–ø –º–µ–¥–∏–∞)
    """
    target_message = message.reply_to_message if message.reply_to_message else message
    media_type = None
    file_id = None
    original_extension = ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ file_id
    if target_message.photo:
        media_type = 'photo'
        file_id = target_message.photo[-1].file_id
        original_extension = ".jpg"
    elif target_message.video:
        media_type = 'video'
        file_id = target_message.video.file_id
        original_extension = ".mp4"
    elif target_message.animation:
        media_type = 'animation'
        file_id = target_message.animation.file_id
        original_extension = ".mp4" # GIF-–∫–∏ –≤ telegram —ç—Ç–æ mp4 –±–µ–∑ –∑–≤—É–∫–∞
    elif target_message.sticker:
        if target_message.sticker.is_animated or target_message.sticker.is_video:
            return False, "–ò–∑–≤–∏–Ω–∏, –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ –≤–∏–¥–µ–æ-—Å—Ç–∏–∫–µ—Ä—ã —è –∏—Å–∫–∞–∂–∞—Ç—å –Ω–µ —É–º–µ—é.", None
        media_type = 'sticker'
        file_id = target_message.sticker.file_id
        original_extension = ".webp"
    
    if not file_id:
        return False, "–ù–µ –Ω–∞—à–µ–ª, —á—Ç–æ –∏—Å–∫–∞–∂–∞—Ç—å. –û—Ç–≤–µ—Ç—å –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é.", None

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    input_path = f"temp_distort_in_{file_id}{original_extension}"
    output_path = f"temp_distort_out_{file_id}.jpg" # –ò—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ —Å—Ç–∏–∫–µ—Ä—ã –±—É–¥—É—Ç jpg
    
    if not await download_file(file_id, input_path):
        return False, "–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∏—Å–∫–∞–∂–µ–Ω–∏—è.", None

    success = False
    try:
        if media_type in ['photo', 'sticker']:
            success = await distort_image(input_path, output_path)
            # –î–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ —Ñ–æ—Ç–æ, —Ç.–∫. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ jpg
            if success: media_type = 'photo'
        elif media_type in ['video', 'animation']:
            output_path = f"temp_distort_out_{file_id}.mp4"
            success = await distort_video(input_path, output_path)
    
    finally:
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(input_path):
            os.remove(input_path)

    if success:
        return True, output_path, media_type
    else:
        # –ï—Å–ª–∏ –∏—Å–∫–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if os.path.exists(output_path):
            os.remove(output_path)
        return False, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–æ –≤—Ä–µ–º—è –∏—Å–∫–∞–∂–µ–Ω–∏—è.", None

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ---

async def handle_distortion_request(message: types.Message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–∏—Å—Ç–æ—Ä—à–Ω.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–∫–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–∏–µ
        success, result_path_or_error, media_type = await process_distortion(message)
        
        if not success:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer(result_path_or_error)
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path = result_path_or_error
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            file_to_send = FSInputFile(file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
            if media_type == 'photo':
                await message.answer_photo(file_to_send, caption="üåÄ –î–∏—Å—Ç–æ—Ä—à–Ω –≥–æ—Ç–æ–≤!")
            elif media_type in ['video', 'animation']:
                await message.answer_video(file_to_send, caption="üåÄ –î–∏—Å—Ç–æ—Ä—à–Ω –≥–æ—Ç–æ–≤!")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å–∫–∞–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ò—Å–∫–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_distortion_request: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
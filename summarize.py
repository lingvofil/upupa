import logging
import asyncio
import re
from datetime import datetime, timedelta
from aiogram import types
import random # Needed for random actions

from Config import LOG_FILE, model # Make sure model is imported/available
from Prompts import actions # Make sure actions list is available

async def summarize_chat_history(message: types.Message, chat_model, log_file_path: str, action_list: list):
    chat_id = str(message.chat.id)
    now = datetime.now()
    twenty_four_hours_ago = now - timedelta(hours=12)
    messages_to_summarize = []
    users_in_period = {}  # To store user_id: name and username mapping for mentions
    chat_name = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —á–∞—Ç–∞

    try:
        logging.info(f"Attempting to read log file: {log_file_path}")
        await message.reply("–©–∞—Å –≤—Å–µ—Ö –≤–∞—Å —Å–¥–∞–º...")
        
        with open(log_file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            logging.info(f"Read {len(lines)} lines from log file")
            
            for line in lines:
                try:
                    match = re.search(r"(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+) - Chat (\-?\d+) \((.*?)\) - User (\d+) \((.*?)\) \[(.*?)\]: (.*?)$", line)
                    
                    if match:
                        timestamp_str, log_chat_id, current_chat_name, user_id, username, display_name, text = match.groups()
                        
                        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                        if not text.strip():
                            continue
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                        if str(log_chat_id) == chat_id and not chat_name:
                            chat_name = current_chat_name
                        
                        try:
                            log_timestamp = datetime.strptime(timestamp_str, "%Y-%m-%dT%H:%M:%S.%f")
                            
                            if str(log_chat_id) == chat_id and log_timestamp >= twenty_four_hours_ago:
                                display_name = display_name.strip() if display_name and display_name.strip() else username
                                messages_to_summarize.append({"username": username, "display_name": display_name, "text": text.strip()})
                                
                                if username and username.lower() not in ['none', 'null']:
                                    users_in_period[user_id] = {"username": username, "display_name": display_name}
                                
                        except ValueError as e:
                            logging.warning(f"Invalid timestamp format: {timestamp_str}, error: {e}")
                            continue
                    else:
                        logging.warning(f"Unable to parse log line: {line.strip()}")
                        
                except Exception as e:
                    logging.error(f"Error parsing log line '{line.strip()}': {e}")
                    continue

    except FileNotFoundError:
        await message.reply(f"–ñ—É—Ä–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {log_file_path}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    except Exception as e:
        logging.error(f"Error reading log file for summary: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        return

    if not messages_to_summarize:
        await message.reply(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –≤ —á–∞—Ç–µ {chat_name} –Ω–∏—Ö—É—è –Ω–µ –±—ã–ª–æ.")
        return

    logging.info(f"Found {len(messages_to_summarize)} messages to summarize in chat {chat_id}")
    logging.info(f"Users in period: {users_in_period}")

    summary_input_text = f"–°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ (–≤—Å–µ–≥–æ {len(messages_to_summarize)} —Å–æ–æ–±—â–µ–Ω–∏–π):\n\n"
    for msg in messages_to_summarize:
        summary_input_text += f"{msg['display_name']}: {msg['text']}\n"

    user_mentions_list = []
    for user_data in users_in_period.values():
        display_name = user_data["display_name"] 
        if display_name:
            user_mentions_list.append(display_name)
    
    user_mentions_str = ", ".join(user_mentions_list) if user_mentions_list else "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

    summary_prompt = f"""–ü—Ä–æ—Å—É–º–º–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_name}. –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (—Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –æ–±—Å—Ü–µ–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π), —Ä–∞–∑–±–µ–π –Ω–∞ –∞–±–∑–∞—Ü—ã. 
    –£–ø–æ–º—è–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã –ø–æ –∏–º–µ–Ω–∏ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @): {user_mentions_str}.
    –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±—ã–ª–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–æ–≤—Å–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤ –æ–¥–∏–Ω –∞–±–∑–∞—Ü.

    –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:
    {summary_input_text}

    –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:
    """

    try:
        # Send typing/processing action
        random_action = random.choice(action_list)
        await message.bot.send_chat_action(chat_id=message.chat.id, action=random_action)

        # Use the provided chat_model (gemini-2.0-flash)
        def sync_gemini_summarize_call():
            try:
                response = chat_model.generate_content(summary_prompt)
                return response.text  # Access the generated text
            except Exception as e:
                logging.error(f"Error generating content with model: {e}")
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

        await message.reply("–ü–∏—à—É –¥–æ–∫–ª–∞–¥...")
        summary_response = await asyncio.to_thread(sync_gemini_summarize_call)

        # Send the summary response
        await message.reply(summary_response)

    except Exception as e:
        logging.error(f"API Error during summarization: {e}")
        await message.reply("ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API.")
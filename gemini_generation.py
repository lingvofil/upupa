import asyncio
import logging
import random
import base64
from io import BytesIO

from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from PIL import Image

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import image_model, bot 
from prompts import actions

def is_valid_image_data(data: bytes) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ª–∏ –±–∞–π—Ç—ã —Å —Å–∏–≥–Ω–∞—Ç—É—Ä –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    if data.startswith(b'\x89PNG') or data.startswith(b'\xff\xd8'):
        return True
    return False

async def save_and_send_generated_image(message: types.Message, image_data: bytes, caption: str = None):
    try:
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        raw_buffered_image = types.BufferedInputFile(image_data, filename="gemini_image_raw.png")
        await message.reply_photo(raw_buffered_image, caption=caption)
        logging.info("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    except TelegramBadRequest:
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1 –Ω–µ —É–¥–∞–ª–∞—Å—å. –ó–∞–ø—É—Å–∫–∞—é Pillow.")
        try:
            image = Image.open(BytesIO(image_data))
            output_buffer = BytesIO()
            image.save(output_buffer, 'PNG')
            output_buffer.seek(0)
            processed_buffered_image = types.BufferedInputFile(output_buffer.read(), filename="gemini_image_processed.png")
            await message.reply_photo(processed_buffered_image, caption=caption)
            logging.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ Pillow –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as pil_error:
            logging.error(f"Pillow –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {pil_error}")
            await message.reply("API –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")

async def process_gemini_generation(prompt: str):
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ Gemini —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
        response = await asyncio.to_thread(
            image_model.generate_content,
            contents=prompt,
            generation_config={
                'response_modalities': ['TEXT', 'IMAGE']
            }
        )

        image_data = None
        text_response = ""

        for part in response.candidates[0].content.parts:
            if hasattr(part, "inline_data") and part.inline_data:
                mime_type = getattr(part.inline_data, "mime_type", "")
                if mime_type.startswith("image/"):
                    raw_data = part.inline_data.data
                    try:
                        image_data = base64.b64decode(raw_data)
                    except Exception:
                        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64. –í–æ–∑–º–æ–∂–Ω–æ API —É–∂–µ –≤–µ—Ä–Ω—É–ª–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                        image_data = raw_data if isinstance(raw_data, bytes) else None
            elif hasattr(part, "text") and part.text:
                text_response += part.text.strip()

        if image_data:
            if not is_valid_image_data(image_data):
                logging.error(f"API –≤–µ—Ä–Ω—É–ª–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç: {image_data[:100]}")
                return 'FAILURE', {"error": "API —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."}
            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Gemini —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            return 'SUCCESS', {"image_data": image_data, "caption": text_response}
        elif text_response:
            logging.warning(f"Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç: {text_response}")
            return 'REFINED_PROMPT', {"new_prompt": text_response}
        else:
            logging.error("Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∏ —Ç–µ–∫—Å—Ç.")
            return 'FAILURE', {"error": "API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∏ —Ç–µ–∫—Å—Ç–∞."}

    except Exception as e:
        import traceback
        error_traceback = traceback.format_exc()
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_gemini_generation: {error_traceback}")
        return 'FAILURE', {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {repr(e)}"}

async def handle_gemini_generation_command(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))
    prompt = None
    if message.text.lower().startswith("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π "):
        prompt = message.text[len("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π "):].strip()
    elif message.text.lower().strip() == "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π" and message.reply_to_message:
        prompt = message.reply_to_message.text or message.reply_to_message.caption
    if not prompt:
        await message.reply("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    processing_message = await message.reply("–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º... ü§ñ")
    status, data = await process_gemini_generation(prompt)

    if status == 'SUCCESS':
        await processing_message.delete()
        await save_and_send_generated_image(message, data['image_data'], caption=data.get('caption'))
        return

    if status == 'REFINED_PROMPT':
        await processing_message.edit_text("–ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–º. –£—Ç–æ—á–Ω—è—é –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
        new_prompt = data['new_prompt']
        status, data = await process_gemini_generation(new_prompt)
        if status == 'SUCCESS':
            await processing_message.delete()
            await save_and_send_generated_image(message, data['image_data'], caption=data.get('caption'))
            return

    await processing_message.delete()
    await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')}")

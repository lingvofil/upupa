import asyncio
import logging
import random
import base64
from io import BytesIO

from aiogram import types
from PIL import Image

# V-- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–£–Æ –ú–û–î–ï–õ–¨ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ê–†–¢–ò–ù–û–ö --V
from config import image_model, bot 
from prompts import actions

# ... —Ñ—É–Ω–∫—Ü–∏—è save_and_send_generated_image ...
async def save_and_send_generated_image(message: types.Message, image_data: bytes, caption: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ñ–æ—Ç–æ."""
    try:
        buffered_image = types.BufferedInputFile(image_data, filename="gemini_image.png")
        await message.reply_photo(buffered_image, caption=caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –æ—Ç Gemini: {e}")
        await message.reply("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")


async def process_gemini_generation(prompt: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–£—Å–ø–µ—Ö, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏)
    """
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ Gemini —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
        
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å image_model –Ω–∞–ø—Ä—è–º—É—é, —ç—Ç–æ –±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        response = await asyncio.to_thread(
            image_model.generate_content, # <-- –ò–ó–ú–ï–ù–ï–ù–û
            contents=prompt,
            generation_config={
                'response_modalities': ['TEXT', 'IMAGE']
            }
            # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        )
        
        image_data = None
        text_response = ""

        # –ò—â–µ–º –≤ –æ—Ç–≤–µ—Ç–µ —á–∞—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
        for part in response.candidates[0].content.parts:
            if part.inline_data:
                # –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if part.inline_data.mime_type.startswith("image/"):
                    image_data = base64.b64decode(part.inline_data.data)
            elif part.text:
                # –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å
                text_response += part.text + "\n"
        
        if image_data:
            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Gemini —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            return True, None, image_data, text_response.strip()
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–∞–∑ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ
            error_message = text_response or "Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            logging.warning(f"Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç: {error_message}")
            return False, error_message, None, None

    except Exception as e:
        import traceback
        error_traceback = traceback.format_exc()
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_gemini_generation: {error_traceback}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {repr(e)}", None, None


async def handle_gemini_generation_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π'.
    """
    await bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))

    prompt = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π"
    if message.text.lower().startswith("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π "):
        prompt = message.text[len("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π "):].strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif message.text.lower().strip() == "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π" and message.reply_to_message:
        prompt = message.reply_to_message.text or message.reply_to_message.caption

    if not prompt:
        await message.reply("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    processing_message = await message.reply("–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º... ü§ñ")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    success, error_message, image_data, text_caption = await process_gemini_generation(prompt)
    
    await processing_message.delete()

    if success and image_data:
        # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        await save_and_send_generated_image(message, image_data, caption=text_caption)
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: {error_message}"
        await message.reply(error_text)

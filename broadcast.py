import asyncio
import logging
from datetime import datetime
from aiogram import types
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from Config import ADMIN_ID, LOG_FILE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def log_message(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    timestamp = datetime.now().isoformat()
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{timestamp} - BROADCAST - {message}\n")

async def get_all_chats_from_log():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
    chats = set()
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                if " - Chat " in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
                    chat_part = line.split(" - Chat ")[1].split(" ")[0]
                    try:
                        chat_id = int(chat_part)
                        chats.add(chat_id)
                    except ValueError:
                        continue
    except FileNotFoundError:
        logger.warning("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return list(chats)

async def send_broadcast_message(bot, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —á–∞—Ç—ã"""
    chats = await get_all_chats_from_log()
    
    if not chats:
        log_message("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return 0, 0
    
    successful_sends = 0
    failed_sends = 0
    
    log_message(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ {len(chats)} —á–∞—Ç–æ–≤")
    
    for chat_id in chats:
        try:
            await bot.send_message(chat_id, message_text)
            successful_sends += 1
            log_message(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.1)
            
        except TelegramForbiddenError:
            failed_sends += 1
            log_message(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –≤ —á–∞—Ç {chat_id} (–±–æ—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
            
        except TelegramBadRequest as e:
            failed_sends += 1
            log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            
        except Exception as e:
            failed_sends += 1
            log_message(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
    
    log_message(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful_sends}, –ù–µ—É–¥–∞—á–Ω–æ: {failed_sends}")
    return successful_sends, failed_sends

async def handle_broadcast_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    text = message.text
    if not text or "—É–ø—É–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:" not in text.lower():
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —É–ø—É–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∞: –≤–∞—à —Ç–µ–∫—Å—Ç")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ "—É–ø—É–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:"
    broadcast_text = text.split(":", 1)[1].strip()
    
    if not broadcast_text:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.reply(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{broadcast_text}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    successful, failed = await send_broadcast_message(message.bot, broadcast_text)
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    result_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
    result_text += f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
    result_text += f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {failed}\n"
    result_text += f"üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {successful + failed}"
    
    await message.reply(result_text)

def extract_broadcast_text(text: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
    if "—É–ø—É–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:" in text.lower():
        return text.split(":", 1)[1].strip()
    return ""

def is_broadcast_command(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return text and "—É–ø—É–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:" in text.lower()
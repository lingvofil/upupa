import json
import re
import asyncio
import random
from datetime import datetime, time
from typing import Dict, List, Optional, Tuple
from aiogram import types
from aiogram.types import Message
import logging
from Config import model, LOG_FILE, ADMIN_ID

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
BIRTHDAY_FILE = "birthdays.json"

def load_birthdays() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(BIRTHDAY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {BIRTHDAY_FILE}")
        return {}

def save_birthdays(birthdays: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        with open(BIRTHDAY_FILE, 'w', encoding='utf-8') as f:
            json.dump(birthdays, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {BIRTHDAY_FILE}: {e}")

def get_chat_birthdays(chat_id: int) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    all_birthdays = load_birthdays()
    chat_key = str(chat_id)
    return all_birthdays.get(chat_key, {})

def save_chat_birthday(chat_id: int, user_id: int, birthday_data: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
    all_birthdays = load_birthdays()
    chat_key = str(chat_id)
    user_key = str(user_id)
    
    if chat_key not in all_birthdays:
        all_birthdays[chat_key] = {}
    
    all_birthdays[chat_key][user_key] = birthday_data
    save_birthdays(all_birthdays)

def parse_birthday_date(text: str) -> Optional[Tuple[int, int]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–º–æ–π –¥—Ä DD –º–µ—Å—è—Ü" –∏–ª–∏ "–º–æ–π –¥—Ä DD.MM"
    patterns = [
        r"–º–æ–π –¥—Ä (\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)",
        r"–º–æ–π –¥—Ä (\d{1,2})\.(\d{1,2})",
        r"–º–æ–π –¥—Ä (\d{1,2})/(\d{1,2})"
    ]
    
    months = {
        "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
        "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
        "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
    }
    
    for pattern in patterns:
        match = re.search(pattern, text.lower())
        if match:
            day = int(match.group(1))
            if len(match.groups()) > 1:
                if match.group(2) in months:
                    month = months[match.group(2)]
                else:
                    month = int(match.group(2))
            else:
                continue
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            if 1 <= day <= 31 and 1 <= month <= 12:
                return (day, month)
    
    return None

def get_user_messages_from_log(user_id: int, chat_id: int, limit: int = 100) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    messages = []
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        # –ò—â–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
        user_messages = []
        for line in lines:
            if f"Chat {chat_id}" in line and f"User {user_id}" in line and "]:" in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ "]:"
                message_text = line.split("]:")[1].strip()
                if message_text and len(message_text) > 10:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    user_messages.append(message_text)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
        if len(user_messages) > limit:
            messages = random.sample(user_messages, limit)
        else:
            messages = user_messages
                        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    
    return messages

async def generate_birthday_greeting(user_name: str, user_messages: List[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages_context = "\n".join(user_messages[:80])  # –ë–µ—Ä–µ–º 80 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    prompt = f"""
    –°–æ–∑–¥–∞–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ, –Ω–æ –≤–µ—Å–µ–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞:
    {messages_context}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –∏ –∏—Ä–æ–Ω–∏—á–Ω–æ–µ
    - –û–±–∏–ª–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ (–º–∞—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è)
    - –í–µ—Å–µ–ª–æ–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø–æ —Å—É—Ç–∏
    - –°—Å—ã–ª–∫–∏ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (—á—Ç–æ –∂–µ–ª–∞–µ—à—å –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –∂–∏–∑–Ω–∏)
    - –ù–µ –±–æ–ª–µ–µ 250 —Å–ª–æ–≤
    - –ù–∞—á–∏–Ω–∞–π —Å "–° –¥–Ω—é—Ö–æ–π" –∏–ª–∏ –ø–æ—Ö–æ–∂–µ–≥–æ
    - –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å —Ç–æ–∫—Å–∏—á–Ω–æ–≥–æ, –Ω–æ –ª—é–±—è—â–µ–≥–æ –¥—Ä—É–≥–∞
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
    
    –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è: "–° –¥–Ω—é—Ö–æ–π, —É–±–ª—é–¥–æ–∫! –ï—â–µ –æ–¥–∏–Ω –≥–æ–¥ —Ç–≤–æ–µ–≥–æ –ø–∏–∑–¥–µ—Ü–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø—Ä–æ—à–µ–ª... –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –∂–∏–∑–Ω–∏..."
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return f"–° –¥–Ω—é—Ö–æ–π, {user_name}! –ë–æ—Ç —Å–ª–æ–º–∞–ª—Å—è, –Ω–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Ç–µ–±—è –Ω–µ –∑–∞–±—ã–ª, —É–±–ª—é–¥–æ–∫! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –º–µ–Ω—å—à–µ –±–∞–≥–æ–≤ –∏ –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏! üéâ"

async def handle_birthday_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
        birthday_date = parse_birthday_date(message.text)
        if not birthday_date:
            await message.reply("–î–∞ –ø–æ—à–µ–ª —Ç—ã –Ω–∞—Ö—É–π, –ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ: '—É–ø—É–ø–∞ –∑–∞–ø–æ–º–Ω–∏: –º–æ–π –¥—Ä 1 –∞–ø—Ä–µ–ª—è'")
            return
        
        day, month = birthday_date
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        birthday_data = {
            "day": day,
            "month": month,
            "name": message.from_user.first_name or "",
            "username": message.from_user.username or "",
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
        save_chat_birthday(message.chat.id, message.from_user.id, birthday_data)
        
        await message.reply("–ó–∞–ø–∏—Å–∞–ª –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ üìÖ")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_birthday_command: {e}")
        await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")

async def check_birthdays_and_send_greetings(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"""
    try:
        now = datetime.now()
        current_day = now.day
        current_month = now.month
        today_str = now.strftime("%Y-%m-%d")
        
        all_birthdays = load_birthdays()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        for chat_id, chat_birthdays in all_birthdays.items():
            chat_id_int = int(chat_id)
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∞—Ç–µ
            for user_id, user_data in chat_birthdays.items():
                if user_data["day"] == current_day and user_data["month"] == current_month:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                    last_greeting_key = f"last_greeting_{today_str}"
                    
                    if user_data.get(last_greeting_key):
                        continue  # –£–∂–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                    user_messages = get_user_messages_from_log(int(user_id), chat_id_int)
                    
                    if not user_messages:
                        greeting = f"–° –¥–Ω—é—Ö–æ–π, {user_data['name']}! –•–æ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–±—è –∏ –Ω–µ—Ç, –Ω–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∑–∞–±—ã—Ç—å –Ω–µ –º–æ–≥—É, —É–±–ª—é–¥–æ–∫! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ! üéâ"
                    else:
                        greeting = await generate_birthday_greeting(user_data['name'], user_messages)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_tag = f"[{user_data['name']}](tg://user?id={user_id})"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
                    final_greeting = f"{user_tag}\n\n{greeting}"
                    await bot.send_message(chat_id_int, final_greeting, parse_mode="Markdown")
                    
                    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                    user_data[last_greeting_key] = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_birthdays(all_birthdays)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_birthdays_and_send_greetings: {e}")

async def birthday_scheduler(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    while True:
        try:
            now = datetime.now()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00
            if now.hour == 12 and now.minute == 0:
                await check_birthdays_and_send_greetings(bot)
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                await asyncio.sleep(60)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ birthday_scheduler: {e}")
            await asyncio.sleep(60)

def get_birthday_list(chat_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    chat_birthdays = get_chat_birthdays(chat_id)
    
    if not chat_birthdays:
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã"
    
    result = "üìÖ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n"
    for user_id, data in chat_birthdays.items():
        name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = data.get('username', '')
        day = data['day']
        month = data['month']
        
        month_names = ["", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
                      "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
        
        result += f"{name}"
        if username:
            result += f" (@{username})"
        result += f" - {day} {month_names[month]}\n"
    
    return result

def get_all_birthdays_list() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    all_birthdays = load_birthdays()
    
    if not all_birthdays:
        return "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã"
    
    result = "üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
    
    for chat_id, chat_birthdays in all_birthdays.items():
        result += f"üîπ –ß–∞—Ç {chat_id}:\n"
        
        for user_id, data in chat_birthdays.items():
            name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            username = data.get('username', '')
            day = data['day']
            month = data['month']
            
            month_names = ["", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
                          "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
            
            result += f"   {name}"
            if username:
                result += f" (@{username})"
            result += f" - {day} {month_names[month]}\n"
        
        result += "\n"
    
    return result

def find_user_in_chat_birthdays(chat_id: int, identifier: str) -> Optional[Tuple[str, Dict]]:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username"""
    chat_birthdays = get_chat_birthdays(chat_id)
    
    for user_id, user_data in chat_birthdays.items():
        name = user_data.get('name', '').lower()
        username = user_data.get('username', '').lower()
        
        if (identifier.lower() == name or 
            identifier.lower() == username or 
            identifier.lower() == f"@{username}"):
            return user_id, user_data
    
    return None

async def handle_test_greeting_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è/username –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        text = message.text
        if text.lower().startswith("—É–ø—É–ø–∞ –ø–æ–∑–¥—Ä–∞–≤—å "):
            identifier = text[15:].strip()  # –£–±–∏—Ä–∞–µ–º "—É–ø—É–ø–∞ –ø–æ–∑–¥—Ä–∞–≤—å "
        elif text.lower().startswith("–ø–æ–∑–¥—Ä–∞–≤—å "):
            identifier = text[9:].strip()  # –£–±–∏—Ä–∞–µ–º "–ø–æ–∑–¥—Ä–∞–≤—å "
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: —É–ø—É–ø–∞ –ø–æ–∑–¥—Ä–∞–≤—å [–∏–º—è/username]")
            return
            
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        user_info = find_user_in_chat_birthdays(message.chat.id, identifier)
        if not user_info:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
            return
        
        user_id, user_data = user_info
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        user_messages = get_user_messages_from_log(int(user_id), message.chat.id)
        
        if not user_messages:
            greeting = f"–° –¥–Ω—é—Ö–æ–π, {user_data['name']}! –•–æ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–±—è –∏ –Ω–µ—Ç, –Ω–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∑–∞–±—ã—Ç—å –Ω–µ –º–æ–≥—É, —É–±–ª—é–¥–æ–∫! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ! üéâ"
        else:
            greeting = await generate_birthday_greeting(user_data['name'], user_messages)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tag = f"[{user_data['name']}](tg://user?id={user_id})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        test_message = f"üß™ **–¢–ï–°–¢–û–í–û–ï –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ï** üß™\n\n{user_tag}\n\n{greeting}"
        await message.reply(test_message, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_test_greeting_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")

async def handle_birthday_list_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    birthday_list = get_birthday_list(message.chat.id)
    await message.reply(birthday_list)

async def handle_admin_birthday_list_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    birthday_list = get_all_birthdays_list()
    await message.reply(birthday_list)
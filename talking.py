import random
import logging
import asyncio
import os
import json
from aiogram import types

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import (
    MAX_HISTORY_LENGTH, CHAT_SETTINGS_FILE, chat_settings,
    conversation_history, model, bot
)
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
from chat_settings import save_chat_settings, add_chat
from prompts import (
    PROMPTS_TEXT, PROMPTS_DICT, get_available_prompts,
    get_prompts_list_text, actions, get_prompt_by_name,
    PROMPT_PIROZHOK, PROMPT_PIROZHOK1, PROMPT_POROSHOK, PROMPT_POROSHOK1,
    KEYWORDS, CUSTOM_PROMPT_TEMPLATE,
    DIALOG_TRIGGER_KEYWORDS  # <<< –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢
)
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
from lexicon_settings import (save_user_message,
    extract_messages_by_username,
    extract_messages_by_full_name,
    get_frequent_phrases_from_text
)
# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
from random_reactions import process_random_reactions
from stat_rank_settings import track_message_statistics


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# =============================================================================

async def handle_poem_command(message: types.Message, poem_type: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ–≤ ('–ø–∏—Ä–æ–∂–æ–∫' –∏–ª–∏ '–ø–æ—Ä–æ—à–æ–∫').
    """
    await bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '{poem_type}' –≤—ã–∑–≤–∞–Ω")

    parts = message.text.lower().split(maxsplit=1)
    characters = parts[1] if len(parts) > 1 else "—Å–ª—É—á–∞–π–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞"

    if poem_type == "–ø–∏—Ä–æ–∂–æ–∫":
        base_prompt = PROMPT_PIROZHOK1[0] if message.chat.id == -1001707530786 and len(parts) == 1 else PROMPT_PIROZHOK[0]
        error_response = "üî• –ü–∏—Ä–æ–∂–æ–∫ —Å–≥–æ—Ä–µ–ª –≤ –¥—É—Ö–æ–≤–∫–µ!"
    else: # –ø–æ—Ä–æ—à–æ–∫
        base_prompt = PROMPT_POROSHOK1[0] if message.chat.id == -1001707530786 and len(parts) == 1 else PROMPT_POROSHOK[0]
        error_response = "üí® –ü–æ—Ä–æ—à–æ–∫ —Ä–∞–∑–≤–µ—è–ª—Å—è..."

    full_prompt = base_prompt + characters

    try:
        def sync_call():
            return model.generate_content(full_prompt).text
        response_text = await asyncio.to_thread(sync_call)
    except Exception as e:
        logging.error(f"Gemini API Error for {poem_type}: {e}")
        response_text = error_response

    await message.reply(response_text[:4000])


async def handle_list_prompts_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø—Ä–æ–º–ø—Ç—ã', –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
    """
    await bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))
    prompts_text = get_prompts_list_text()
    await message.reply(prompts_text)


async def handle_current_prompt_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç', —Å–æ–æ–±—â–∞—è —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –±–æ—Ç–∞.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))

    update_chat_settings(chat_id)
    current_settings = chat_settings.get(chat_id, {})
    current_prompt_name = current_settings.get("prompt_name")
    prompt_type = current_settings.get("prompt_type", "standard")

    reply_text = ""
    if current_prompt_name:
        if prompt_type == "user_style":
            imitated_user = current_settings.get("imitated_user", {})
            display_name = imitated_user.get("display_name", current_prompt_name)
            reply_text = f"–Ø —Å–µ–π—á–∞—Å –∫–æ—Å–ø–ª–µ—é {display_name} –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é –≤ –µ–≥–æ —Å—Ç–∏–ª–µ."
        elif prompt_type == "custom":
            reply_text = "–ï–±–∞—Ç—å —Ç–µ–±—è –Ω–µ –¥–æ–ª–∂–Ω–æ"
        else:
            reply_text = f"–Ø {current_prompt_name}."
    else:
        reply_text = "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

    await message.reply(reply_text)

async def handle_set_prompt_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–≥–æ—Ç–æ–≤–æ–≥–æ –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ).
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–∞—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))

    command_part = message.text[len("–ø—Ä–æ–º–ø—Ç "):].strip()
    if not command_part:
        await message.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç.")
        return

    predefined_prompt_text = get_prompt_by_name(command_part.lower())

    update_chat_settings(chat_id)
    current_settings = chat_settings[chat_id]

    if predefined_prompt_text:
        current_settings["prompt"] = predefined_prompt_text
        current_settings["prompt_name"] = command_part.lower()
        current_settings["prompt_type"] = "standard"
        reply_message = f"{command_part.capitalize()} –≤ –∑–¥–∞–Ω–∏–∏."
    else:
        full_custom_prompt = CUSTOM_PROMPT_TEMPLATE.format(personality=command_part)
        current_settings["prompt"] = full_custom_prompt
        current_settings["prompt_name"] = "–∫–∞—Å—Ç–æ–º–Ω—ã–π"
        current_settings["prompt_type"] = "custom"
        reply_message = "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π! –õ–∞–¥–Ω–æ, –ø—Ä–∏–Ω—è—Ç–æ"

    current_settings["prompt_source"] = "user"
    if "imitated_user" in current_settings:
        del current_settings["imitated_user"]
    save_chat_settings()
    await message.reply(reply_message)


async def handle_set_participant_prompt_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π –∏–∑-–∑–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))

    command_part = message.text[len("–ø—Ä–æ–º–ø—Ç —É—á–∞—Å—Ç–Ω–∏–∫ "):].strip()
    if not command_part:
        await message.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    display_name = command_part.lstrip('@')

    messages = await extract_messages_by_username(display_name, chat_id)
    if not messages:
        messages = await extract_messages_by_full_name(display_name, chat_id)

    if not messages:
        await message.reply(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{display_name}', —á—Ç–æ–±—ã –µ–º—É –ø–æ–¥—Ä–∞–∂–∞—Ç—å.")
        return

    user_prompt = await _create_user_style_prompt(messages, display_name)
    update_chat_settings(chat_id)
    current_settings = chat_settings[chat_id]
    current_settings["prompt"] = user_prompt
    current_settings["prompt_name"] = display_name
    current_settings["prompt_source"] = "user_imitation"
    current_settings["prompt_type"] = "user_style"
    current_settings["imitated_user"] = {
        "username": display_name if '@' in command_part else None,
        "full_name": display_name if '@' not in command_part else None,
        "display_name": display_name
    }
    save_chat_settings()
    await message.reply(f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –∫–∞–∫ {display_name}!")


async def handle_change_prompt_randomly_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø–æ–º–µ–Ω—è–π –ø—Ä–æ–º–ø—Ç', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))

    available_prompts = get_available_prompts()
    if not available_prompts:
        await message.reply("–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–¥–∏ –Ω–∞—Ö—É–π.")
        return

    current_prompt_name = chat_settings.get(chat_id, {}).get("prompt_name")

    possible_prompts = list(available_prompts.keys())
    if len(possible_prompts) > 1 and current_prompt_name in possible_prompts:
        possible_prompts.remove(current_prompt_name)

    new_prompt_name = random.choice(possible_prompts)
    new_prompt_text = available_prompts[new_prompt_name]

    update_chat_settings(chat_id)
    current_settings = chat_settings[chat_id]
    current_settings["prompt"] = new_prompt_text
    current_settings["prompt_name"] = new_prompt_name
    current_settings["prompt_source"] = "user"
    current_settings["prompt_type"] = "standard"
    if "imitated_user" in current_settings:
        del current_settings["imitated_user"]

    save_chat_settings()
    await message.reply(f"–¢–µ–ø–µ—Ä—å —è {new_prompt_name} –Ω–∞—Ö—É–π!")


# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê (–ò–ó–ú–ï–ù–ï–ù–û)
# =============================================================================

def update_conversation_history(chat_id: str, name: str, message_text: str, role: str):
    if chat_id not in conversation_history:
        conversation_history[chat_id] = []
    conversation_history[chat_id].append({"role": role, "name": name, "content": message_text})
    if len(conversation_history[chat_id]) > MAX_HISTORY_LENGTH:
        conversation_history[chat_id] = conversation_history[chat_id][-MAX_HISTORY_LENGTH:]

def format_chat_history(chat_id: str) -> str:
    if chat_id not in conversation_history or not conversation_history[chat_id]:
        return "–î–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è."
    return "\n".join(f"{msg['name']}: {msg['content']}" for msg in conversation_history[chat_id])

async def generate_response(prompt: str, chat_id: str, bot_name: str) -> str:
    try:
        def sync_gemini_call():
            response = model.generate_content(prompt)
            return response.text
        gemini_response_text = await asyncio.to_thread(sync_gemini_call)
        if not gemini_response_text.strip():
            gemini_response_text = "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... üòÖ"
        update_conversation_history(chat_id, bot_name, gemini_response_text, role="assistant")
        return gemini_response_text[:4000]
    except Exception as e:
        logging.error(f"Gemini API Error: {e}")
        error_message = "–û—à–∏–±–∫–∞ –±–ª—è—Ç"
        update_conversation_history(chat_id, bot_name, error_message, role="assistant")
        return error_message

async def handle_bot_conversation(message: types.Message, user_first_name: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —á–∞—Ç–∞.
    """
    chat_id = str(message.chat.id)
    
    # <<< –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô >>>
    user_input = message.text
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∞ –Ω–∞ —Å—É—Ç—å
    temp_input_lower = user_input.lower()
    for keyword in DIALOG_TRIGGER_KEYWORDS:
        if temp_input_lower.startswith(keyword):
            # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/–∑–∞–ø—è—Ç—ã–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
            user_input = user_input[len(keyword):].lstrip(' ,')
            break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç.–∫. –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤ –Ω–∞—á–∞–ª–µ
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
    if not user_input.strip():
        return "–î–∞, —è –≤–∞—Å —Å–ª—É—à–∞—é. –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å?"
    # <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô >>>

    update_conversation_history(chat_id, user_first_name, user_input, role="user")
    
    selected_prompt, prompt_name = get_current_chat_prompt(chat_id)
    chat_history_formatted = format_chat_history(chat_id)
    
    full_prompt = (
        f"{selected_prompt}\n\n"
        f"–≠—Ç–æ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç –ª–∏—Ü–∞ '{prompt_name}'.\n"
        f"–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{chat_history_formatted}\n"
        f"{prompt_name}:"
    )
    
    response_text = await generate_response(full_prompt, chat_id, prompt_name)
    return response_text

async def process_general_message(message: types.Message):
    chat_id = str(message.chat.id)
    update_chat_settings(chat_id)
    current_settings = chat_settings.get(chat_id, {})

    is_direct_appeal = False
    is_private_chat = message.chat.type == "private"
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot.id
    
    if message.text:
        text_lower = message.text.lower()
        if (text_lower.startswith("–ø–∏—Å—è ") or
            any(kw in text_lower.split() for kw in KEYWORDS if kw not in ["–ø–∏—Ä–æ–∂–æ–∫", "–ø–æ—Ä–æ—à–æ–∫"])):
            is_direct_appeal = True
        if not is_direct_appeal and message.entities:
            for entity in message.entities:
                if entity.type == "mention" and message.text[entity.offset:entity.offset + entity.length] == "@" + (await bot.get_me()).username:
                    is_direct_appeal = True
                    break

    if (is_private_chat or is_reply_to_bot or is_direct_appeal) and current_settings.get("dialog_enabled", True):
        user_first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        response = await handle_bot_conversation(message, user_first_name)
        await message.reply(response)
        return

    reaction_sent = await process_random_reactions(
        message, model, save_user_message, track_message_statistics,
        add_chat, chat_settings, save_chat_settings
    )
    if reaction_sent:
        return

    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –≤—ã–∑–≤–∞–ª–æ —Ä–µ–∞–∫—Ü–∏–∏: '{message.text}'")


# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# =============================================================================

async def _create_user_style_prompt(messages: list, display_name: str) -> str:
    """
    (–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è) –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    sample_messages = random.sample(messages, min(200, len(messages)))
    all_text = " ".join(sample_messages)
    frequent_words = get_frequent_phrases_from_text(all_text, n=1, top_n=50)
    phrases_2 = get_frequent_phrases_from_text(all_text, n=2, top_n=10)
    phrases_3 = get_frequent_phrases_from_text(all_text, n=3, top_n=10)
    frequent_phrases = phrases_2 + phrases_3
    
    prompt_parts = [
        f"–¢—ã –¥–æ–ª–∂–µ–Ω –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}.",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ø–∏—Ä—É–π:",
        "- –ú–∞–Ω–µ—Ä—É —Ä–µ—á–∏ –∏ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å",
        "- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–æ—Ä–æ—Ç—ã",
        "- –°—Ç–∏–ª—å —é–º–æ—Ä–∞ –∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è",
        "\n–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:",
    ]
    for i, msg in enumerate(sample_messages[:15], 1):
        prompt_parts.append(f"{i}. {msg}")
    if frequent_words:
        prompt_parts.extend(["\n–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞:", ", ".join([word for word, _ in frequent_words])])
    if frequent_phrases:
        prompt_parts.append("\n–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã:")
        for phrase, _ in frequent_phrases:
            prompt_parts.append(f"- {phrase}")
    prompt_parts.extend([
        "\n–û—Ç–≤–µ—á–∞–π –¢–û–ß–ù–û –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ö–æ–∂–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏.",
        "–ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ—Ç —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫.",
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 50 —Å–ª–æ–≤."
    ])
    return "\n".join(prompt_parts)


def update_chat_settings(chat_id: str) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    if chat_id not in chat_settings:
        chat_settings[chat_id] = {
            "dialog_enabled": True, 
            "reactions_enabled": True,
            "prompt": PROMPTS_DICT["–≤—Ä–∞—á"],
            "prompt_name": "–ª–µ—Ç–æ–ø–∏—Å–µ—Ü", 
            "prompt_source": "daily"
        }

def get_current_chat_prompt(chat_id: str) -> tuple:
    update_chat_settings(chat_id)
    settings = chat_settings.get(chat_id, {})
    prompt_text = settings.get("prompt", PROMPTS_DICT["–ª–µ—Ç–æ–ø–∏—Å–µ—Ü"])
    prompt_name = settings.get("prompt_name", "–ª–µ—Ç–æ–ø–∏—Å–µ—Ü")
    return prompt_text, prompt_name

import random
import logging
import asyncio
import os
import json
from aiogram import types

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import (
    MAX_HISTORY_LENGTH, CHAT_SETTINGS_FILE, chat_settings,
    conversation_history, model, bot
)
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
from chat_settings import save_chat_settings, add_chat
from prompts import (
    PROMPTS_TEXT, PROMPTS_DICT, get_available_prompts,
    get_prompts_list_text, actions, get_prompt_by_name,
    PROMPT_PIROZHOK, PROMPT_PIROZHOK1, PROMPT_POROSHOK, PROMPT_POROSHOK1,
    KEYWORDS
)
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ –≤ Lexicon_settings.py)
from lexicon_settings import (save_user_message,
    extract_messages_by_username,
    extract_messages_by_full_name,
    get_frequent_phrases_from_text
)
# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
from random_reactions import process_random_reactions
from stat_rank_settings import track_message_statistics


# =============================================================================
# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================================================================

async def handle_poem_command(message: types.Message, poem_type: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ–≤ ('–ø–∏—Ä–æ–∂–æ–∫' –∏–ª–∏ '–ø–æ—Ä–æ—à–æ–∫').
    """
    await bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '{poem_type}' –≤—ã–∑–≤–∞–Ω")
    
    parts = message.text.lower().split(maxsplit=1)
    characters = parts[1] if len(parts) > 1 else "—Å–ª—É—á–∞–π–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞"

    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if poem_type == "–ø–∏—Ä–æ–∂–æ–∫":
        base_prompt = PROMPT_PIROZHOK1[0] if message.chat.id == -1001707530786 and len(parts) == 1 else PROMPT_PIROZHOK[0]
        error_response = "üî• –ü–∏—Ä–æ–∂–æ–∫ —Å–≥–æ—Ä–µ–ª –≤ –¥—É—Ö–æ–≤–∫–µ!"
    else: # –ø–æ—Ä–æ—à–æ–∫
        base_prompt = PROMPT_POROSHOK1[0] if message.chat.id == -1001707530786 and len(parts) == 1 else PROMPT_POROSHOK[0]
        error_response = "üí® –ü–æ—Ä–æ—à–æ–∫ —Ä–∞–∑–≤–µ—è–ª—Å—è..."
        
    full_prompt = base_prompt + characters

    try:
        def sync_call():
            return model.generate_content(full_prompt).text
        response_text = await asyncio.to_thread(sync_call)
    except Exception as e:
        logging.error(f"Gemini API Error for {poem_type}: {e}")
        response_text = error_response

    await message.reply(response_text[:4000])


async def process_general_message(message: types.Message):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã
    –¥—Ä—É–≥–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—Å—Ç—É–ø–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥,
    —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å.
    """
    chat_id = str(message.chat.id)
    update_chat_settings(chat_id)
    current_settings = chat_settings.get(chat_id, {})

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä—è–º—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –±–æ—Ç—É
    is_direct_appeal = False
    is_private_chat = message.chat.type == "private"
    is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == bot.id
    
    if message.text:
        text_lower = message.text.lower()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        if (text_lower.startswith("–ø–∏—Å—è ") or
            any(kw in text_lower.split() for kw in KEYWORDS if kw not in ["–ø–∏—Ä–æ–∂–æ–∫", "–ø–æ—Ä–æ—à–æ–∫"])):
            is_direct_appeal = True
        if not is_direct_appeal and message.entities:
            for entity in message.entities:
                if entity.type == "mention" and message.text[entity.offset:entity.offset + entity.length] == "@" + (await bot.get_me()).username:
                    is_direct_appeal = True
                    break

    # 2. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–∏–ª–∏ –õ–°, –∏–ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç—É), –≤—Å—Ç—É–ø–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥
    if (is_private_chat or is_reply_to_bot or is_direct_appeal) and current_settings.get("dialog_enabled", True):
        user_first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        response = await handle_bot_conversation(message, user_first_name)
        await message.reply(response)
        return

    # 3. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–ª—É—á–∞–π–Ω–æ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
    if current_settings.get("dialog_enabled", True):
        reaction_sent = await process_random_reactions(
            message, model, save_user_message, track_message_statistics,
            add_chat, chat_settings, save_chat_settings
        )
        if reaction_sent:
            return

    # 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –≤—ã–∑–≤–∞–ª–æ —Ä–µ–∞–∫—Ü–∏–∏: '{message.text}'")


# =============================================================================
# –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ú–ü–¢–ê–ú–ò
# =============================================================================

async def handle_list_prompts_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø—Ä–æ–º–ø—Ç—ã', –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
    """
    await bot.send_chat_action(chat_id=message.chat.id, action=random.choice(actions))
    prompts_text = get_prompts_list_text()
    await message.reply(prompts_text)


async def handle_current_prompt_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç', —Å–æ–æ–±—â–∞—è —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –±–æ—Ç–∞.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))
    
    update_chat_settings(chat_id)
    current_settings = chat_settings.get(chat_id, {})
    current_prompt_name = current_settings.get("prompt_name")
    prompt_type = current_settings.get("prompt_type", "standard")

    reply_text = ""
    if current_prompt_name:
        if prompt_type == "user_style":
            imitated_user = current_settings.get("imitated_user", {})
            display_name = imitated_user.get("display_name", current_prompt_name)
            reply_text = f"–Ø —Å–µ–π—á–∞—Å –∫–æ—Å–ø–ª–µ—é {display_name} –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é –≤ –µ–≥–æ —Å—Ç–∏–ª–µ."
        else:
            reply_text = f"–Ø {current_prompt_name}."
    else:
        current_prompt_text = current_settings.get("prompt")
        found_name = None
        if current_prompt_text:
            for name_key, text_val in PROMPTS_DICT.items():
                if text_val == current_prompt_text:
                    found_name = name_key
                    chat_settings[chat_id]["prompt_name"] = found_name
                    chat_settings[chat_id]["prompt_type"] = "standard"
                    save_chat_settings()
                    break
        if found_name:
            reply_text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: {found_name} (–∏–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)."
        else:
            reply_text = "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π '–ø—Ä–æ–º–ø—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ>'."

    await message.reply(reply_text)


async def handle_set_prompt_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–º–∏—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))

    command_part = message.text.lower().replace("–ø—Ä–æ–º–ø—Ç ", "").strip()
    if not command_part:
        await message.reply("–î–µ–±–∏–ª, —É–∫–∞–∂–∏ '–ø—Ä–æ–º–ø—Ç '. –ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–º–ø—Ç —Ö—É–µ–ø–ª–µ—Ç –∏–ª–∏ –ø—Ä–æ–º–ø—Ç @username")
        return

    is_user_imitation = command_part.startswith("@") or not get_prompt_by_name(command_part)

    if is_user_imitation:
        display_name = command_part[1:] if command_part.startswith("@") else command_part
        messages = (await extract_messages_by_username(display_name, chat_id) if command_part.startswith("@")
                    else await extract_messages_by_full_name(display_name, chat_id))

        if not messages:
            await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{display_name}', –Ω–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.")
            return

        user_prompt = await _create_user_style_prompt(messages, display_name)
        update_chat_settings(chat_id)
        current_settings = chat_settings[chat_id]
        current_settings["prompt"] = user_prompt
        current_settings["prompt_name"] = display_name
        current_settings["prompt_source"] = "user_imitation"
        current_settings["prompt_type"] = "user_style"
        current_settings["imitated_user"] = {
            "username": display_name if command_part.startswith("@") else None,
            "full_name": display_name if not command_part.startswith("@") else None,
            "display_name": display_name
        }
        await message.reply(f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –∫–∞–∫ {display_name}! –ì–æ—Ç–æ–≤ –∫–æ—Å–ø–ª–µ–∏—Ç—å —ç—Ç–æ–≥–æ –¥–æ–ª–±–æ–µ–±–∞.")
    else:
        new_prompt_text = get_prompt_by_name(command_part)
        update_chat_settings(chat_id)
        current_settings = chat_settings[chat_id]
        current_settings["prompt"] = new_prompt_text
        current_settings["prompt_name"] = command_part
        current_settings["prompt_source"] = "user"
        current_settings["prompt_type"] = "standard"
        if "imitated_user" in current_settings:
            del current_settings["imitated_user"]
        await message.reply(f"{command_part.capitalize()} –≤ –∑–¥–∞–Ω–∏–∏.")
    
    save_chat_settings()


async def handle_change_prompt_randomly_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø–æ–º–µ–Ω—è–π –ø—Ä–æ–º–ø—Ç', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å.
    """
    chat_id = str(message.chat.id)
    await bot.send_chat_action(chat_id=chat_id, action=random.choice(actions))

    available_prompts = get_available_prompts()
    if not available_prompts:
        await message.reply("–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–¥–∏ –Ω–∞—Ö—É–π.")
        return

    current_prompt_name = chat_settings.get(chat_id, {}).get("prompt_name")
    
    possible_prompts = list(available_prompts.keys())
    if len(possible_prompts) > 1 and current_prompt_name in possible_prompts:
        possible_prompts.remove(current_prompt_name)
    
    new_prompt_name = random.choice(possible_prompts)
    new_prompt_text = available_prompts[new_prompt_name]
    
    update_chat_settings(chat_id)
    current_settings = chat_settings[chat_id]
    current_settings["prompt"] = new_prompt_text
    current_settings["prompt_name"] = new_prompt_name
    current_settings["prompt_source"] = "user"
    current_settings["prompt_type"] = "standard"
    if "imitated_user" in current_settings:
        del current_settings["imitated_user"]
        
    save_chat_settings()
    await message.reply(f"–¢–µ–ø–µ—Ä—å —è {new_prompt_name} –Ω–∞—Ö—É–π!")


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ===

async def _create_user_style_prompt(messages: list, display_name: str) -> str:
    """
    (–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è) –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    sample_messages = random.sample(messages, min(200, len(messages)))
    all_text = " ".join(sample_messages)
    frequent_words = get_frequent_phrases_from_text(all_text, n=1, top_n=50)
    phrases_2 = get_frequent_phrases_from_text(all_text, n=2, top_n=10)
    phrases_3 = get_frequent_phrases_from_text(all_text, n=3, top_n=10)
    frequent_phrases = phrases_2 + phrases_3
    
    prompt_parts = [
        f"–¢—ã –¥–æ–ª–∂–µ–Ω –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}.",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ø–∏—Ä—É–π:",
        "- –ú–∞–Ω–µ—Ä—É —Ä–µ—á–∏ –∏ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å",
        "- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–æ—Ä–æ—Ç—ã",
        "- –°—Ç–∏–ª—å —é–º–æ—Ä–∞ –∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è",
        "\n–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:",
    ]
    for i, msg in enumerate(sample_messages[:15], 1):
        prompt_parts.append(f"{i}. {msg}")
    if frequent_words:
        prompt_parts.extend(["\n–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞:", ", ".join([word for word, _ in frequent_words])])
    if frequent_phrases:
        prompt_parts.append("\n–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã:")
        for phrase, _ in frequent_phrases:
            prompt_parts.append(f"- {phrase}")
    prompt_parts.extend([
        "\n–û—Ç–≤–µ—á–∞–π –¢–û–ß–ù–û –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ—Ö–æ–∂–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏.",
        "–ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ—Ç —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫.",
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 50 —Å–ª–æ–≤."
    ])
    return "\n".join(prompt_parts)


def update_chat_settings(chat_id: str) -> None:
    if chat_id not in chat_settings:
        chat_settings[chat_id] = {
            "dialog_enabled": True, "prompt": PROMPTS_DICT["–≤—Ä–∞—á"],
            "prompt_name": "–ª–µ—Ç–æ–ø–∏—Å–µ—Ü", "prompt_source": "daily"
        }

def get_current_chat_prompt(chat_id: str) -> tuple:
    update_chat_settings(chat_id)
    settings = chat_settings.get(chat_id, {})
    prompt_text = settings.get("prompt", PROMPTS_DICT["–ª–µ—Ç–æ–ø–∏—Å–µ—Ü"])
    prompt_name = settings.get("prompt_name", "–ª–µ—Ç–æ–ø–∏—Å–µ—Ü")
    return prompt_text, prompt_name

def update_conversation_history(user_id: int, message_text: str, role: str = "user"):
    if user_id not in conversation_history:
        conversation_history[user_id] = []
    conversation_history[user_id].append({"role": role, "content": message_text})
    if len(conversation_history[user_id]) > MAX_HISTORY_LENGTH:
        conversation_history[user_id] = conversation_history[user_id][-MAX_HISTORY_LENGTH:]

def format_chat_history(user_id: int) -> str:
    if user_id not in conversation_history:
        return ""
    return "\n".join(f"{msg['role'].capitalize()}: {msg['content']}" for msg in conversation_history[user_id])

async def generate_response(prompt: str, user_id: int, **kwargs) -> str:
    try:
        def sync_gemini_call():
            response = model.generate_content(prompt)
            return response.text
        gemini_response_text = await asyncio.to_thread(sync_gemini_call)
        if not gemini_response_text.strip():
            gemini_response_text = "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... üòÖ"
        update_conversation_history(user_id, gemini_response_text, role="assistant")
        return gemini_response_text[:4000]
    except Exception as e:
        logging.error(f"Gemini API Error: {e}")
        error_message = "–û—à–∏–±–∫–∞ –±–ª—è—Ç"
        update_conversation_history(user_id, error_message, role="assistant")
        return error_message

async def handle_bot_conversation(message: types.Message, user_first_name: str) -> str:
    chat_id = str(message.chat.id)
    user_id = message.from_user.id
    user_input = message.text
    update_conversation_history(user_id, user_input, role="user")
    
    selected_prompt, _ = get_current_chat_prompt(chat_id)
    chat_history_formatted = format_chat_history(user_id)
    name_instruction = f"–í–∞–∂–Ω–æ: –°–µ–π—á–∞—Å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –∏–º–µ–Ω–∏ '{user_first_name}'. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É –ø–æ —ç—Ç–æ–º—É –∏–º–µ–Ω–∏ –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ." if user_first_name else ""
    
    full_prompt = f"{selected_prompt}\n\n{name_instruction}\n\n{chat_history_formatted}\nAssistant:"
    
    response_text = await generate_response(full_prompt, user_id)
    return response_text

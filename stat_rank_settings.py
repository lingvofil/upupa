import os
import json
import logging
from datetime import date
from aiogram import types
from config import STATS_FILE, message_stats, bot
from prompts import RANKS

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    global message_stats
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as file:
                message_stats = json.load(file)
                logging.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(message_stats)} —á–∞—Ç–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            message_stats = {}
    else:
        message_stats = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_stats():
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as file:
            json.dump(message_stats, file, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_stats()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async def track_message_statistics(message: types.Message):
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    
    # Get current date
    current_date = date.today()
    current_date_str = current_date.isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    previous_total = 0
    if chat_id in message_stats and user_id in message_stats[chat_id]:
        previous_total = message_stats[chat_id][user_id].get("total", 0)
    
    # Initialize stats structure if missing
    if chat_id not in message_stats:
        message_stats[chat_id] = {}
    if user_id not in message_stats[chat_id]:
        message_stats[chat_id][user_id] = {
            "total": previous_total,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "daily": 0, 
            "weekly": 0,
            "last_daily_reset": current_date_str,
            "last_weekly_reset": current_date_str
        }
    
    user_stats = message_stats[chat_id][user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ total –Ω–µ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if user_stats["total"] < previous_total:
        user_stats["total"] = previous_total
    
    # Handle date conversion safely
    try:
        last_daily_reset = date.fromisoformat(user_stats.get("last_daily_reset", current_date_str))
    except (TypeError, ValueError):
        last_daily_reset = current_date
        user_stats["last_daily_reset"] = current_date_str
    
    try:
        last_weekly_reset = date.fromisoformat(user_stats.get("last_weekly_reset", current_date_str))
    except (TypeError, ValueError):
        last_weekly_reset = current_date
        user_stats["last_weekly_reset"] = current_date_str
    
    # Check and reset daily stats
    if current_date > last_daily_reset:
        user_stats["daily"] = 0
        user_stats["last_daily_reset"] = current_date_str
    
    # Check and reset weekly stats
    days_since_reset = (current_date - last_weekly_reset).days
    if days_since_reset >= 7:
        user_stats["weekly"] = 0
        user_stats["last_weekly_reset"] = current_date_str
    
    # Increment counters
    user_stats["total"] += 1
    user_stats["daily"] += 1
    user_stats["weekly"] += 1
    
    # Check for rank promotion
    new_rank = None
    for count, rank in sorted(RANKS.items()):
        if user_stats["total"] == count:
            new_rank = rank
            break
    
    if new_rank:
        await message.reply(f"üéâ –ü–∞–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–∞–Ω–≥ **{new_rank}**!")
    
    # Save statistics
    save_stats()

async def get_user_statistics(chat_id: str, user_id: str) -> tuple[str, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    """
    if chat_id not in message_stats or user_id not in message_stats[chat_id]:
        return "–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª, –∏–¥–∏ –ø–∏—à–∏.", False

    user_stats = message_stats[chat_id][user_id]

    user_rank = "–±–µ–∑ —Ä–∞–Ω–≥–∞"
    for count, rank in sorted(RANKS.items(), reverse=True):
        if user_stats["total"] >= count:
            user_rank = rank
            break

    response = (
        f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üí¨ –°–µ–≥–æ–¥–Ω—è: {user_stats.get('daily', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {user_stats.get('weekly', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"üåé –í—Å–µ–≥–æ: {user_stats.get('total', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"üèÖ –†–∞–Ω–≥: {user_rank}"
    )
    return response, True

# –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç
async def get_valid_users(chat_id: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
    valid_users = {}
    if chat_id in message_stats:
        for user_id, stats in message_stats[chat_id].items():
            try:
                user_id_int = int(user_id)
                if user_id_int > 0:
                    valid_users[user_id] = stats
            except (ValueError, TypeError):
                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {user_id}")
                continue
    return valid_users

async def get_user_display_name(chat_id: int, user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        user = chat_member.user
        
        if user.first_name and user.last_name:
            return f"{user.first_name} {user.last_name}"
        elif user.first_name:
            return user.first_name
        elif user.username:
            return f"@{user.username}"
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

def get_user_rank(message_count: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for count, rank in sorted(RANKS.items(), reverse=True):
        if message_count >= count:
            return rank
    return "–±–µ–∑ —Ä–∞–Ω–≥–∞"

async def format_top_users(chat_id: str, valid_users: dict) -> tuple[list[str], int]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    total_chat_messages = sum(stats.get("total", 0) for stats in valid_users.values())
    sorted_users = sorted(valid_users.items(), key=lambda x: x[1].get("total", 0), reverse=True)[:15]
    
    top_users = []
    for i, (user_id, stats) in enumerate(sorted_users, start=1):
        display_name = await get_user_display_name(int(chat_id), int(user_id))
        user_rank = get_user_rank(stats.get("total", 0))
        top_users.append(f"{i}. {display_name} - {stats.get('total', 0)} (<i>{user_rank}</i>)")
    
    return top_users, total_chat_messages

async def generate_chat_stats_report(chat_id: str) -> str | None:
    """
    Generates a complete report on chat statistics.
    Gathers all necessary data, formats it, and returns a ready-made string for the reply.
    Returns None if there is no data for the report.
    """
    logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    valid_users = await get_valid_users(chat_id)
    if not valid_users:
        logging.warning(f"–î–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."

    top_users, total_chat_messages = await format_top_users(chat_id, valid_users)
    
    response = (
        "üìä <b>–¢–æ–ø —Ö—É—è—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞:</b>\n" +
        "\n".join(top_users) +
        f"\n\nüí• –í–µ—Å—å —á–∞—Ç –Ω–∞—Ö—É—è—Ä–∏–ª {total_chat_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, —è —Ñ—à–æ–∫–∏!"
    )
    
    return response
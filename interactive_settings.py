import logging
from aiogram import types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from config import chat_settings, sms_disabled_chats, bot
from chat_settings import save_chat_settings
from sms_settings import save_sms_disabled_chats

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def is_user_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞."""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è user_id {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

async def get_settings_markup(chat_id: str):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "–ë–æ–ª—Ç–∞–ª–∫–∞"
    dialog_enabled = chat_settings.get(chat_id, {}).get("dialog_enabled", True)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "–†–µ–∞–∫—Ü–∏–∏" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    reactions_enabled = chat_settings.get(chat_id, {}).get("reactions_enabled", True)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "–°–ú–°/–ú–ú–°"
    sms_enabled = chat_id not in sms_disabled_chats

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞*\n\n"
    text += f"üó£Ô∏è *–ë–æ–ª—Ç–∞–ª–∫–∞:* {'–í–∫–ª. ‚úÖ' if dialog_enabled else '–í—ã–∫–ª. ‚ùå'}\n"
    text += f"_(–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –≤ –ª–∏—á–∫–µ)_\n\n"
    text += f"üéâ *–°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:* {'–í–∫–ª. ‚úÖ' if reactions_enabled else '–í—ã–∫–ª. ‚ùå'}\n"
    text += f"_(–ë–æ—Ç –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)_\n\n"
    text += f"üí¨ *–°–ú–°/–ú–ú–°:* {'–í–∫–ª. ‚úÖ' if sms_enabled else '–í—ã–∫–ª. ‚ùå'}\n"
    text += f"_(–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Ç–∞–º–∏)_\n"

    # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è "–ë–æ–ª—Ç–∞–ª–∫–∏"
    builder.button(
        text=f"{'–í—ã–∫–ª—é—á–∏—Ç—å' if dialog_enabled else '–í–∫–ª—é—á–∏—Ç—å'} –±–æ–ª—Ç–∞–ª–∫—É",
        callback_data="settings:toggle:dialog"
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è "–†–µ–∞–∫—Ü–∏–π"
    builder.button(
        text=f"{'–í—ã–∫–ª—é—á–∏—Ç—å' if reactions_enabled else '–í–∫–ª—é—á–∏—Ç—å'} —Ä–µ–∞–∫—Ü–∏–∏",
        callback_data="settings:toggle:reactions"
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è "–°–ú–°/–ú–ú–°"
    builder.button(
        text=f"{'–í—ã–∫–ª—é—á–∏—Ç—å' if sms_enabled else '–í–∫–ª—é—á–∏—Ç—å'} –°–ú–°/–ú–ú–°",
        callback_data="settings:toggle:sms"
    )
    
    builder.adjust(1) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    return text, builder.as_markup()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def send_settings_menu(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '—É–ø—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    if not await is_user_admin(message.chat.id, message.from_user.id):
        await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –∏–¥–∏ –Ω–∞—Ö—É–π.")
        return

    chat_id = str(message.chat.id)
    text, markup = await get_settings_markup(chat_id)
    await message.answer(text, reply_markup=markup, parse_mode="Markdown")

async def handle_settings_callback(query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not await is_user_admin(query.message.chat.id, query.from_user.id):
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
        return

    chat_id = str(query.message.chat.id)
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä: "settings:toggle:dialog"
    try:
        action = query.data.split(":")[2]
    except IndexError:
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {query.data}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if chat_id not in chat_settings:
        chat_settings[chat_id] = {
            "dialog_enabled": True,
            "reactions_enabled": True,
            "prompt": None
        }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if action == "dialog":
        current_state = chat_settings[chat_id].get("dialog_enabled", True)
        chat_settings[chat_id]["dialog_enabled"] = not current_state
        save_chat_settings()
        await query.answer(f"–ë–æ–ª—Ç–∞–ª–∫–∞ {'–≤—ã–∫–ª—é—á–µ–Ω–∞' if not chat_settings[chat_id]['dialog_enabled'] else '–≤–∫–ª—é—á–µ–Ω–∞'}.")
    
    elif action == "reactions":
        current_state = chat_settings[chat_id].get("reactions_enabled", True)
        chat_settings[chat_id]["reactions_enabled"] = not current_state
        save_chat_settings()
        await query.answer(f"–°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ {'–≤—ã–∫–ª—é—á–µ–Ω—ã' if not chat_settings[chat_id]['reactions_enabled'] else '–≤–∫–ª—é—á–µ–Ω—ã'}.")

    elif action == "sms":
        if chat_id in sms_disabled_chats:
            sms_disabled_chats.remove(chat_id)
            await query.answer("–°–ú–°/–ú–ú–° –≤–∫–ª—é—á–µ–Ω—ã.")
        else:
            sms_disabled_chats.add(chat_id)
            await query.answer("–°–ú–°/–ú–ú–° –≤—ã–∫–ª—é—á–µ–Ω—ã.")
        save_sms_disabled_chats()
    
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    text, markup = await get_settings_markup(chat_id)
    try:
        await query.message.edit_text(text, reply_markup=markup, parse_mode="Markdown")
    except Exception as e:
        # –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å): {e}")


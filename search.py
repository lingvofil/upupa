import os
import random
import logging
import requests
from googleapiclient.discovery import build
from aiogram import types
from aiogram.types import FSInputFile, Message
from config import GOOGLE_API_KEY, SEARCH_ENGINE_ID, giphy_api_key

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Google Custom Search API
def get_google_service():
    service = build("customsearch", "v1", developerKey=GOOGLE_API_KEY)
    return service

def search_images(query: str):
    service = get_google_service()
    result = service.cse().list(q=query, cx=SEARCH_ENGINE_ID, searchType='image').execute()
    items = result.get("items", [])
    image_urls = [item["link"] for item in items]
    return image_urls

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
async def handle_message(message: types.Message, query, temp_img_path, error_msg):
    try:
        image_urls = search_images(query)
        if image_urls:
            random_image_url = random.choice(image_urls)
            img_response = requests.get(random_image_url)
            if img_response.status_code == 200:
                with open(temp_img_path, "wb") as f:
                    f.write(img_response.content)
                photo = FSInputFile(temp_img_path)
                await message.reply_photo(photo=photo)
                os.remove(temp_img_path)
            else:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {random_image_url}")
        else:
            await message.reply(error_msg)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

# –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–Ω–∞–π–¥–∏"
async def process_image_search(query: str) -> tuple[bool, str, bytes | None]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    """
    if not query:
        return False, "–®–æ —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –±–ª—è–¥—å", None
        
    try:
        image_urls = search_images(query)
        if not image_urls:
            return False, "–•—É–π", None
            
        random_image_url = random.choice(image_urls)
        img_response = requests.get(random_image_url)
        
        if img_response.status_code == 200:
            return True, "", img_response.content
        else:
            return False, f"–í–æ—Ç —Ç–µ–±–µ —Å—Ü—ã–ª–∫–æ: {random_image_url}", None
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Google: {e}")
        return False, f"–î–∞ –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π: {e}", None

async def save_and_send_searched_image(message: Message, image_data: bytes):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    temp_img_path = "searched_image.jpg"
    try:
        with open(temp_img_path, "wb") as f:
            f.write(image_data)
        photo = FSInputFile(temp_img_path)
        await message.reply_photo(photo=photo)
    finally:
        if os.path.exists(temp_img_path):
            os.remove(temp_img_path)
            
# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def search_gifs(query: str = "cat"):
    url = 'https://api.giphy.com/v1/gifs/search'
    params = {
        'api_key': giphy_api_key,
        'q': query,
        'limit': 10,
        'offset': 0,
        'rating': 'g',
        'lang': 'en'
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        gifs = data.get('data', [])
        gif_urls = [gif['images']['original']['url'] for gif in gifs]
        return gif_urls
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Giphy API: {e}")
        return []

# –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "–∫–æ—Ç–æ–≥–∏—Ñ"
async def process_gif_search(search_query: str) -> tuple[bool, str, bytes | None]:
    """
    –ò—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É.
    
    Args:
        search_query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–∏—Ñ–∫–∏
    
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –¥–∞–Ω–Ω—ã–µ –≥–∏—Ñ–∫–∏)
    """
    logging.info(f"–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≥–∏—Ñ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
    
    try:
        gif_urls = search_gifs(search_query)
        
        if not gif_urls:
            logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–∏—Ñ–æ–∫")
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–∏—Ñ–∫—É üòø", None
            
        random_gif_url = random.choice(gif_urls)
        logging.info(f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π URL: {random_gif_url}")
        
        response = requests.get(random_gif_url)
        
        if response.status_code == 200:
            logging.info("–ì–∏—Ñ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True, "", response.content
        else:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–∏—Ñ–∫—É: {random_gif_url}"
            logging.warning(error_msg)
            return False, error_msg, None
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∏—Ñ–∫–∏: {e}"
        logging.error(error_msg)
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏ üòø", None

async def save_and_send_gif(message: types.Message, gif_data: bytes) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–∏—Ñ–∫—É.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        gif_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–∏—Ñ–∫–∏
    """
    temp_gif_path = "temp_cat.gif"
    try:
        logging.info("–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏—Ñ–∫–∏")
        with open(temp_gif_path, "wb") as f:
            f.write(gif_data)
            
        gif = FSInputFile(temp_gif_path)
        await message.reply_document(gif)
        logging.info("–ì–∏—Ñ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏ üòø")
        
    finally:
        if os.path.exists(temp_gif_path):
            os.remove(temp_gif_path)
            logging.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

async def process_gif_search(search_query: str) -> tuple[bool, str, bytes | None]:
    """
    –ò—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É.
    
    Args:
        search_query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–∏—Ñ–∫–∏
    
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –¥–∞–Ω–Ω—ã–µ –≥–∏—Ñ–∫–∏)
    """
    logging.info(f"–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≥–∏—Ñ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
    
    try:
        gif_urls = search_gifs(search_query)
        
        if not gif_urls:
            logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–∏—Ñ–æ–∫")
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–∏—Ñ–∫—É üòø", None
            
        random_gif_url = random.choice(gif_urls)
        logging.info(f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π URL: {random_gif_url}")
        
        response = requests.get(random_gif_url)
        
        if response.status_code == 200:
            logging.info("–ì–∏—Ñ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True, "", response.content
        else:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–∏—Ñ–∫—É: {random_gif_url}"
            logging.warning(error_msg)
            return False, error_msg, None
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∏—Ñ–∫–∏: {e}"
        logging.error(error_msg)
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏ üòø", None
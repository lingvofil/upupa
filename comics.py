# comics.py
import random
import re
from datetime import datetime, timedelta
from aiogram import types
from PIL import Image, ImageDraw, ImageFont
import textwrap
import os
from config import LOG_FILE

# –®–∞–±–ª–æ–Ω—ã –∫–æ–º–∏–∫—Å–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
COMIC_TEMPLATES = [
    {
        "name": "two_panel",
        "panels": 2,
        "width": 800,
        "height": 400,
        "panel_positions": [(0, 0, 400, 400), (400, 0, 400, 400)],
        "text_positions": [(200, 350), (600, 350)]
    },
    {
        "name": "three_panel",
        "panels": 3,
        "width": 1200,
        "height": 400,
        "panel_positions": [(0, 0, 400, 400), (400, 0, 400, 400), (800, 0, 400, 400)],
        "text_positions": [(200, 350), (600, 350), (1000, 350)]
    },
    {
        "name": "vertical_two",
        "panels": 2,
        "width": 400,
        "height": 800,
        "panel_positions": [(0, 0, 400, 400), (0, 400, 400, 400)],
        "text_positions": [(200, 350), (200, 750)]
    }
]

def parse_log_messages(hours_back=24):
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        return []
    
    messages = []
    cutoff_time = datetime.now() - timedelta(hours=hours_back)
    
    for line in lines:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
        match = re.match(r'(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+) - Chat (-?\d+) \((.+?)\) - User (\d+) \((.+?)\) \[(.+?)\]: (.+)', line.strip())
        if match:
            timestamp_str, chat_id, chat_name, user_id, username, display_name, message_text = match.groups()
            
            # –ü–∞—Ä—Å–∏–º timestamp
            try:
                timestamp = datetime.fromisoformat(timestamp_str)
                if timestamp > cutoff_time:
                    messages.append({
                        'timestamp': timestamp,
                        'chat_id': int(chat_id),
                        'user_id': int(user_id),
                        'username': username,
                        'display_name': display_name,
                        'text': message_text
                    })
            except ValueError:
                continue
    
    return messages

def filter_suitable_messages(messages, min_length=10, max_length=100):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤"""
    suitable = []
    
    for msg in messages:
        text = msg['text']
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —Å—Å—ã–ª–∫–∏, —Å–ø–∞–º
        if (text.startswith('/') or 
            text.startswith('http') or 
            len(text) < min_length or 
            len(text) > max_length or
            text.count('üòÄ') > 3):  # –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
            continue
            
        suitable.append(msg)
    
    return suitable

def create_comic_image(template, messages):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∏–∫—Å–∞"""
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (template['width'], template['height']), color='white')
    draw = ImageDraw.Draw(img)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("arial.ttf", 16)
        name_font = ImageFont.truetype("arial.ttf", 14)
    except:
        font = ImageFont.load_default()
        name_font = ImageFont.load_default()
    
    # –†–∏—Å—É–µ–º –ø–∞–Ω–µ–ª–∏ –∫–æ–º–∏–∫—Å–∞
    for i, (x1, y1, x2, y2) in enumerate(template['panel_positions']):
        # –†–∞–º–∫–∞ –ø–∞–Ω–µ–ª–∏
        draw.rectangle([x1, y1, x2, y2], outline='black', width=2)
        
        if i < len(messages):
            msg = messages[i]
            text_x, text_y = template['text_positions'][i]
            
            # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            draw.text((text_x - 100, text_y - 40), f"{msg['display_name']}:", 
                     fill='blue', font=name_font, anchor='mm')
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)
            wrapped_text = textwrap.fill(msg['text'], width=30)
            draw.text((text_x, text_y), wrapped_text, fill='black', font=font, anchor='mm')
    
    return img

def generate_random_comic(chat_id, hours_back=24):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–∏–∫—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–≥–∞
    all_messages = parse_log_messages(hours_back)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —á–∞—Ç—É
    chat_messages = [msg for msg in all_messages if msg['chat_id'] == chat_id]
    
    if len(chat_messages) < 2:
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∏–∫—Å–∞"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    suitable_messages = filter_suitable_messages(chat_messages)
    
    if len(suitable_messages) < 2:
        return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∏–∫—Å–∞"
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
    template = random.choice(COMIC_TEMPLATES)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    selected_messages = random.sample(suitable_messages, min(template['panels'], len(suitable_messages)))
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∏–∫—Å
    comic_image = create_comic_image(template, selected_messages)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
    comic_path = f"temp_comic_{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    comic_image.save(comic_path)
    
    return comic_path, None

async def handle_comic_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–æ–º–∏–∫—Å"""
    try:
        comic_path, error = generate_random_comic(message.chat.id)
        
        if error:
            await message.reply(f"‚ùå {error}")
            return
        
        if comic_path and os.path.exists(comic_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∏–∫—Å
            with open(comic_path, 'rb') as photo:
                await message.reply_photo(
                    photo=photo,
                    caption="üé≠ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–∏–∫—Å –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —á–∞—Ç–∞!"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(comic_path)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∏–∫—Å–∞: {str(e)}")

async def handle_comic_history_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∏–∫—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)"""
    try:
        # –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        comic_path, error = generate_random_comic(message.chat.id, hours_back=168)
        
        if error:
            await message.reply(f"‚ùå {error}")
            return
        
        if comic_path and os.path.exists(comic_path):
            with open(comic_path, 'rb') as photo:
                await message.reply_photo(
                    photo=photo,
                    caption="üé≠ –ö–æ–º–∏–∫—Å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–Ω–µ–¥–µ–ª—è)!"
                )
            
            os.remove(comic_path)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∏–∫—Å")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∏–∫—Å–∞: {str(e)}")

def get_comic_stats(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–º–∏–∫—Å–æ–≤"""
    messages = parse_log_messages(168)  # –ó–∞ –Ω–µ–¥–µ–ª—é
    chat_messages = [msg for msg in messages if msg['chat_id'] == chat_id]
    suitable = filter_suitable_messages(chat_messages)
    
    return {
        'total_messages': len(chat_messages),
        'suitable_messages': len(suitable),
        'available_templates': len(COMIC_TEMPLATES)
    }